export const fetchIndentsList = async (
  role: StepRoles,
  department: string | undefined,
  tab: string,
  user: User,
  page: number = 1,
  pageSize: number = 10,
  searchQuery?: string
) => {
  try {
    if (!role || !tab) {
      throw new Error("role & tab is required");
    }

    if (role !== user.role) {
      throw new Error("You are not authorized to view indents for this role");
    }

    const offset = (page - 1) * pageSize;

    // Preprocess search input for enums (convert "finance" -> "FINANCE", "data science" -> "DATA_SCIENCE")
    const normalizedSearch = searchQuery
      ? searchQuery.trim().toUpperCase().replace(/\s+/g, "_")
      : undefined;

    // Generate filters
    const where: Prisma.IndentsWhereInput = {
      ...generateWhereFilter(role, department, tab, user.email),
      ...(normalizedSearch && {
        OR: [
          {
            department: {
              contains: normalizedSearch,
              mode: "insensitive",
            },
          },
          {
            category: {
              contains: normalizedSearch,
              mode: "insensitive",
            },
          },
          {
            assignedTo: {
              contains: searchQuery,
              mode: "insensitive",
            },
          },
        ],
      }),
    };

    const [indents, total] = await Promise.all([
      prisma.indents.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: {
          createdAt: "desc",
        },
        select: {
          indentId: true,
          department: true,
          status: true,
          category: true,
          description: true,
          priority: true,
          assignedTo: true,
          comments: true,
          dueDate: true,
          createdAt: true,
          updatedAt: true,
          currStep: true,
          prevStep: true,
          lastStepChangeTime: true,
          remarkHistory: {
            orderBy: { createdAt: "asc" },
            select: {
              id: true,
              content: true,
              createdAt: true,
              updatedAt: true,
              isEdited: true,
              role: true,
              step: true,
            },
          },
          attachments: {
            where: {
              isDeleted: false,
            },
            orderBy: { uploadedAt: "asc" },
            select: {
              id: true,
              fileName: true,
              uploadedBy: true,
              uploadedByRole: true,
              indentId: true,
              uploadedAt: true,
            },
          },
        },
      }),

      prisma.indents.count({ where }),
    ]);

    return {
      success: true,
      data: indents,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
    };
  } catch (error) {
    console.error("Error fetching indents:", error);
    throw new Error("Failed to fetch indents");
  }
};
