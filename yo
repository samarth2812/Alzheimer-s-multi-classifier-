// In your tableFormatters.js file, update the formatObligationTableData function:

export const formatObligationTableData = (rawData, actions = {}, sendingReminderId) => {
  console.log(2, sendingReminderId);
  if (!Array.isArray(rawData)) {
    return { columns: [], rows: [] };
  }

  const columns = [
    { Header: "ID", accessor: "id", width: "60px", align: "left" },
    { Header: "Current Step", accessor: "currentStepName", width: "20%", align: "left" },
    { Header: "Assignees", accessor: "assignees", width: "40%", align: "left" },
    { Header: "Actions", accessor: "actions", width: "10%", align: "center" },
  ];

  const rows = rawData.map((item) => ({
    id: (
      <Typography
        sx={{
          color: (theme) => theme.palette.custom.text2,
          fontSize: "11.2px !important",
          fontWeight: 500,
          minWidth: "40px",
          maxWidth: "60px",
        }}
      >
        {item.id || "N/A"}
      </Typography>
    ),
    currentStepName: formatCurrentStep(item.currentStepName),
    assignees: formatAssignees(
      item.assignees,
      () => actions.onSendMail && actions.onSendMail(item.assignees, item),
      sendingReminderId === item.id // This is the key fix - check if this specific item is loading
    ),
    actions: (
      <Box sx={{ display: "flex", justifyContent: "center" }}>
        <CustomIconButton
          icon={Visibility}
          label="View More"
          onClick={() => actions.onViewMore && actions.onViewMore(item)}
          size="small"
        />
      </Box>
    ),
  }));

  return { columns, rows };
};

// Also update the formatIBATableData function:
export const formatIBATableData = (rawData, actions = {}, sendingReminderId) => {
  if (!Array.isArray(rawData)) {
    return { columns: [], rows: [] };
  }

  const columns = [
    { Header: "S.No", accessor: "serialNumber", width: "5%", align: "left" },
    { Header: "Current Status", accessor: "currentStepName", width: "10%", align: "left" },
    { Header: "Pending With", accessor: "pendingWith", width: "20%", align: "left" },
    { Header: "Assignees", accessor: "assignees", width: "40%", align: "left" },
    { Header: "Department", accessor: "department", width: "20%", align: "left" },
    { Header: "Actions", accessor: "actions", width: "15%", align: "center" },
  ];

  const rows = rawData.map((item, index) => ({
    serialNumber: (
      <Typography
        sx={{
          color: (theme) => theme.palette.custom.text2,
          fontSize: "11.2px !important",
          fontWeight: 500,
          minWidth: "40px",
          maxWidth: "60px",
        }}
      >
        {index + 1 || "N/A"}
      </Typography>
    ),
    currentStepName: formatStatus(item.currentStatus),
    pendingWith: formatCurrentStep(item.currentStepName),
    assignees: formatAssignees(
      item.assignees,
      () => actions.onSendMail && actions.onSendMail(item.assignees, item),
      sendingReminderId === item.id // This is the key fix - check if this specific item is loading
    ),
    department: (
      <Typography
        variant="caption"
        sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.6rem" }}
      >
        {departmentLabels.find((d) => d.value === item.department)?.name || item.department || "-"}
      </Typography>
    ),
    actions: (
      <Box sx={{ display: "flex", justifyContent: "center" }}>
        <CustomIconButton
          icon={Visibility}
          label="View More"
          onClick={() => actions.onViewMore && actions.onViewMore(item)}
          size="small"
        />
      </Box>
    ),
  }));

  return { columns, rows };
};
