const indentsWithMeta = await Promise.all(
  indents.map(async (indent) => {
    const pendingWith = getNameFromStep(indent.currStep);
    const currentStepName = getStepName(indent.currStep);
    let assignees: { name: string | null; email: string | null; role: string }[] = [];

    try {
      const response = await fetchUsersList({
        department: indent.department,
        role: pendingWith as Position,
      });
      const userList = response || [];

      if (pendingWith === "DEPARTMENT_MAKER") {
        const userMatch = userList.find(
          (user: any) => user.email === indent.assignedTo
        );
        if (userMatch) {
          assignees.push({
            name: userMatch.name,
            email: userMatch.email,
            role: pendingWith,
          });
        } else if (indent.assignedTo) {
          assignees.push({
            name: null,
            email: indent.assignedTo,
            role: pendingWith,
          });
        }
      } else {
        if (userList.length > 1) {
          assignees = userList.map((user: any) => ({
            name: user.name,
            email: user.email,
            role: pendingWith,
          }));
        } else if (userList[0]) {
          assignees.push({
            name: userList[0].name,
            email: userList[0].email,
            role: pendingWith,
          });
        }
      }
    } catch (error) {
      console.warn(`Failed to fetch users for indent ${indent.indentId}:`, error);
      if (pendingWith === "DEPARTMENT_MAKER" && indent.assignedTo) {
        assignees.push({
          name: null,
          email: indent.assignedTo,
          role: pendingWith,
        });
      }
    }

    return {
      ...indent,
      currentStepName,
      currentStatus: indent.openStatus ? "OPEN" : "CLOSE",
      assignees,
    };
  })
);
