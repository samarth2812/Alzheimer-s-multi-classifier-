import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  InputAdornment,
  Stack,
  Avatar,
  IconButton,
} from "@mui/material";
import { CustomTextField } from "layouts/resuableComponents/customTextField";
import { SearchableDropdown } from "layouts/resuableComponents/searchableDropdown";
import { formSchema } from "./formSchema";
import { z } from "zod";
import toast from "react-hot-toast";
import { apiRequest } from "../../axios/apiRequest";
import { ArrowBackIosNew, CalendarToday } from "@mui/icons-material";
import {
  dialogStyle,
  dialogButtonStyle,
  dialogButtonStyleTwo,
} from "layouts/resuableComponents/styles";
import { CustomSmartPasteField } from "layouts/resuableComponents/customSmartPasteField";
import { CustomSelectDropdown } from "layouts/resuableComponents/customSelectDropdown";
import { DynamicEmailInput } from "layouts/resuableComponents/dynamicEmailInput";

export const commTypeLabels = [
  { name: "Inward", value: "INWARD" },
  { name: "Outward", value: "OUTWARD" },
];

export const categoryLabels = [
  { name: "Incident Report", value: "INCIDENT_REPORT" },
  { name: "Indent", value: "INDENT" },
  { name: "Obligation", value: "OBLIGATION" },
  { name: "Penalty Notice", value: "PENALTY_NOTICE" },
  { name: "Advisory", value: "ADVISORY" },
  { name: "ISE Observation", value: "ISE_OBSERVATION" },
  { name: "General Query", value: "GENERAL_QUERY" },
  { name: "Acknowledgement", value: "ACKNOWLDGEMENT" },
  { name: "Clarifictaion", value: "CLARIFICATION" },
];

export const priorityLabels = [
  { name: "High", value: "HIGH" },
  { name: "Low", value: "LOW" },
  { name: "Medium", value: "MEDIUM" },
];

const formatDatetimeLocal = (isoString) => {
  if (!isoString) return "";
  const date = new Date(isoString);
  const tzOffset = date.getTimezoneOffset() * 60000;
  return new Date(date.getTime() - tzOffset).toISOString().slice(0, 16);
};

const addCommunicationRecordUrl = `${process.env.REACT_APP_BACKEND_URL}/api/v1/communication/`;

export default function CommunicationFormDialog({ open, onClose, onSubmit, initialData, user }) {
  const [formData, setFormData] = useState({
    commId: "",
    commType: "",
    category: "",
    refNo: "",
    sentBy: user.email,
    sentTo: [],
    cc: [],
    subject: "",
    responseDueBy: "",
    priorityLevel: "",
    summary: "",
    status: "Sent",
    parentCommId: "",
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const isReply = !!initialData;

  useEffect(() => {
    if (initialData) {
      setFormData({
        ...initialData,
        responseDueBy: initialData?.responseDueBy
          ? formatDatetimeLocal(initialData.responseDueBy)
          : "",
        priorityLevel: priorityLabels.find((s) => s.value === initialData.priorityLevel)?.name || "",
        commType: commTypeLabels.find((s) => s.value === initialData.commType)?.name || "",
        category: categoryLabels.find((s) => s.value === initialData.category)?.name || "",
        sentBy: user.email,
        status: "Sent",
      });
    }
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (errors[name]) setErrors({ ...errors, [name]: undefined });
  };

  const handleDescriptionChange = (htmlContent) => {
    setFormData((prev) => ({ ...prev, summary: htmlContent }));
  };

  const handleValidationError = (error) => {
    if (error instanceof z.ZodError) {
      const formattedErrors = {};
      error.errors.forEach((err) => {
        const path = err.path[0];
        formattedErrors[path] = err.message;
      });
      setErrors(formattedErrors);
    } else {
      toast.error("An error occurred while submitting the form.");
    }
  };

  const handleAddCommunicationRecord = async (data) => {
    try {
      setIsSubmitting(true);
      const validatedData = formSchema.parse(data);
      const payload = data.parentCommId
        ? { ...validatedData, parentCommId: data.parentCommId }
        : validatedData;

      const result = await apiRequest("POST", addCommunicationRecordUrl, payload);

      if (result.status === 201 || result.status === 204) {
        toast.success("Communication Added Successfully");
      }

      onSubmit();
      onClose();
    } catch (error) {
      handleValidationError(error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSubmit = (isDraft = false) => {
    const finalData = { ...formData, status: isDraft ? "Draft" : "Sent" };
    setFormData(finalData); // just in case UI needs to reflect status
    handleAddCommunicationRecord(finalData);
  };

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md" sx={dialogStyle}>
      <DialogTitle sx={{ p: 0, pb: 2 }}>
        <Box display="flex" alignItems="center" justifyContent="space-between" px={2} pt={2}>
          <Stack direction="row" spacing={1.5} alignItems="center">
            <IconButton onClick={onClose} size="small">
              <ArrowBackIosNew />
            </IconButton>
            <Avatar sx={{ width: 50, height: 50 }}>
              {user?.name?.split(" ")[0]?.[0] ?? ""}
              {user?.name?.split(" ")[1]?.[0] ?? ""}
            </Avatar>
            <Box>
              <Box sx={{ fontSize: "0.85rem", fontWeight: 500 }}>{user?.name}</Box>
              <Box sx={{ fontSize: "0.7rem" }}>{user?.email}</Box>
            </Box>
          </Stack>
          <Stack direction="row" spacing={2}>
            <CustomSelectDropdown
              placeholder="Priority Level"
              name="priorityLevel"
              value={formData.priorityLevel}
              onChange={handleChange}
              options={priorityLabels}
              disabled={isReply}
            />
            <CustomSelectDropdown
              name="commType"
              value={formData.commType}
              onChange={handleChange}
              options={commTypeLabels}
              placeholder="Type"
              disabled={isReply}
            />
          </Stack>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box display="flex" flexDirection="column" gap={3} mt={2}>
          <Box display="flex" gap={2}>
            <SearchableDropdown
              label="Category"
              placeholder="Enter Category"
              name="category"
              options={categoryLabels}
              value={formData.category}
              onChange={handleChange}
              error={errors.category}
              disabled={isReply}
            />
            {formData.refNo && (
              <CustomTextField
                label="Reference Number"
                name="refNo"
                value={formData.refNo}
                disabled
              />
            )}
          </Box>
          <DynamicEmailInput
            label="Sent To"
            name="sentTo"
            placeholder="Receiver Email Address"
            value={formData.sentTo}
            onChange={(val) => setFormData((prev) => ({ ...prev, sentTo: val }))}
            error={errors.sentTo}
          />
          <DynamicEmailInput
            label="CC"
            name="cc"
            placeholder="Add CC recipients"
            value={formData.cc}
            onChange={(val) => setFormData((prev) => ({ ...prev, cc: val }))}
            error={errors.cc}
          />
          <CustomTextField
            label="Subject"
            name="subject"
            placeholder="Enter Subject of the Email"
            value={formData.subject}
            onChange={handleChange}
            error={errors.subject}
          />
          <Box display="flex" gap={2}>
            <CustomTextField
              label="Response Due By"
              name="responseDueBy"
              type="datetime-local"
              value={formData.responseDueBy}
              onChange={handleChange}
              error={errors.responseDueBy}
              endAdornment={
                <InputAdornment position="end">
                  <CalendarToday sx={{ fontSize: "1.2rem" }} />
                </InputAdornment>
              }
              disabled={isReply}
            />
          </Box>
          <CustomSmartPasteField
            value={formData.summary}
            label="Summary"
            placeholder="Enter summary"
            onChange={handleDescriptionChange}
            error={errors.summary}
          />
        </Box>
      </DialogContent>

      <DialogActions>
        <Button size="small" sx={dialogButtonStyleTwo} onClick={() => handleSubmit(true)}>
          Save as Draft
        </Button>
        <Button onClick={() => handleSubmit(false)} disabled={isSubmitting} sx={dialogButtonStyle} size="small">
          {initialData ? "Reply" : "Send"}
        </Button>
      </DialogActions>
    </Dialog>
  );
}
