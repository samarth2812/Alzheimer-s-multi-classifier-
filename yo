export const fetchIncidentsList = async (
  role: StepRoles,
  department: string | undefined,
  tab: string,
  user: User
) => {
  try {
    if (!role || !tab) {
      throw new Error("role & tab is required");
    }

    if (role !== user.role) {
      throw new Error("You are not authorized to view incident for this role");
    }
    const where = generateWhereFilter(role, department, tab, user.email);
    return await prisma.incidentReporting.findMany({
      where,
      select: {
        incidentId: true,
        type: true,
        department: true,
        status: true,
        severity: true,
        description: true,
        assignedTo: true,
        comments: true,
        createdAt: true,
        updatedAt: true,
        currStep: true,
        prevStep: true,
        lastStepChangeTime: true,
        reportedDate: true,
        dueDate: true,
        remarkHistory: {
          orderBy: { createdAt: "asc" }, //Chronological
          select: {
            id: true,
            content: true,
            createdAt: true,
            updatedAt: true,
            isEdited: true,
            role: true,
            step: true,
          },
        },
        attachments: {
          where: {
            isDeleted: false,
          },
          orderBy: { uploadedAt: "asc" }, //Chronological
          select: {
            id: true,
            fileName: true,
            uploadedBy: true,
            uploadedByRole: true,
            incidentId: true,
            uploadedAt: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });
  } catch (error) {
    console.error("Error fetching incidents:", error);
    throw new Error("Failed to fetch incidents");
  }
};

export const fetchIndentsList = async (
  role: StepRoles,
  department: string | undefined,
  tab: string,
  user: User,
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    if (!role || !tab) {
      throw new Error("role & tab is required");
    }

    if (role !== user.role) {
      throw new Error("You are not authorized to view indents for this role");
    }

    const where = generateWhereFilter(role, department, tab, user.email);
    const offset = (page - 1) * pageSize;

    const [indents, total] = await Promise.all([
      prisma.indents.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: {
          createdAt: "desc",
        },
        select: {
          indentId: true,
          department: true,
          status: true,
          category: true,
          description: true,
          priority: true,
          assignedTo: true,
          comments: true,
          dueDate: true,
          createdAt: true,
          updatedAt: true,
          currStep: true,
          prevStep: true,
          lastStepChangeTime: true,
          remarkHistory: {
            orderBy: { createdAt: "asc" },
            select: {
              id: true,
              content: true,
              createdAt: true,
              updatedAt: true,
              isEdited: true,
              role: true,
              step: true,
            },
          },
          attachments: {
            where: {
              isDeleted: false,
            },
            orderBy: { uploadedAt: "asc" },
            select: {
              id: true,
              fileName: true,
              uploadedBy: true,
              uploadedByRole: true,
              indentId: true,
              uploadedAt: true,
            },
          },
        },
      }),

      prisma.indents.count({ where }),
    ]);

    return {
      success: true,
      data: indents,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
    };
  } catch (error) {
    console.error("Error fetching indents:", error);
    throw new Error("Failed to fetch indents");
  }
};
