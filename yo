import { useEffect, useState, useMemo } from "react";
import toast from "react-hot-toast";

import {
  Box,
  Button,
  Skeleton,
  TextField,
  InputAdornment,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import SearchIcon from "@mui/icons-material/Search";
import { useSelector } from "react-redux";

import debounce from "lodash.debounce";

import { apiRequest } from "../../axios/apiRequest";
import CommunicationFormDialog from "pages/RegulatoryCommunication/communicationFormDialog";
import EmptyStateBox from "layouts/resuableComponents/emptyStateBox";
import SideDrawer from "layouts/resuableComponents/sideDrawer";
import CommunicationList from "layouts/resuableComponents/listComponent";
import MailTrailAccordion from "./MailTrailAccordion";

import { topBarStyle, topBarSearchStyle, animatedButtonStyle } from "layouts/resuableComponents/styles";
import { BsTable } from "react-icons/bs";

const getCommTypeFromTab = (tab) => {
  switch (tab) {
    case "inbox":
      return "inbox";
    case "sent":
      return "send";
    case "drafts":
      return "drafts";
    default:
      return "inbox";
  }
};

const CreateCommunicationPage = () => {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editCommData, setEditCommData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [tab, setTab] = useState("sent");
  const [drawerOpen, setDrawerOpen] = useState(true);
  const [selectedCommId, setSelectedCommId] = useState("");
  const [selectedComm, setSelectedComm] = useState(null);

  const user = useSelector((state) => state.user.user);

  const fetchData = async (tabType = "inbox") => {
    setLoading(true);
    const typeParam = getCommTypeFromTab(tabType);
    const fetchUrl = `${process.env.REACT_APP_BACKEND_URL}/api/v1/communication?type=${typeParam}&userEmail=${user.email}`;

    try {
      const response = await apiRequest("GET", fetchUrl);
      setData(response.data);
      setFilteredData(response.data);

      if (selectedCommId) {
        const updatedComm = response.data.find((comm) => comm.commId === selectedCommId);
        setSelectedComm(updatedComm);
      }
    } catch {
      toast.error("Failed to fetch communications");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData(tab);
  }, [tab]);

  const debouncedFilter = useMemo(
    () =>
      debounce((term, data) => {
        if (term) {
          const lowercased = term.toLowerCase();
          const filtered = data.filter((item) =>
            Object.keys(item).some((key) => {
              const value = item[key];
              return value && value.toString().toLowerCase().includes(lowercased);
            })
          );
          setFilteredData(filtered);
        } else {
          setFilteredData(data);
        }
      }, 300),
    []
  );

  useEffect(() => {
    const normalized = searchTerm.toLowerCase().trim();
    debouncedFilter(normalized, data);
    return () => debouncedFilter.cancel();
  }, [searchTerm, data]);

  const handleSearch = (event) => setSearchTerm(event.target.value);

  const handleAddCommClick = () => {
    setEditCommData(null);
    setIsModalOpen(true);
  };

  const handleSelectComm = (id) => {
    const comm = data.find((item) => item.commId === id);
    setSelectedCommId(id);
    setSelectedComm(comm);
  };

  return (
    <>
      {selectedComm && (
        <MailTrailAccordion
          mailTrail={[selectedComm, ...(selectedComm.replies || [])]}
          onReply={(comm) => {
            setEditCommData({
              refNo: comm.refNo,
              category: comm.category,
              sentTo: [comm.sentBy],
              subject: `Re: ${comm.subject}`,
            });
            setIsModalOpen(true);
          }}
        />
      )}

      <Box sx={{ width: "100%", height: "100%", display: "flex" }}>
        <SideDrawer
          open={drawerOpen}
          handleDrawerToggle={() => setDrawerOpen(!drawerOpen)}
          selectedTab={tab}
          onSelectTab={(val) => setTab(val)}
        />

        <Box sx={{ flexGrow: 1, px: 2, py: 2 }}>
          <Box sx={{ ...topBarStyle, mb: 1, gap: 2 }}>
            <TextField
              fullWidth
              placeholder="Search Communication Records..."
              variant="outlined"
              sx={topBarSearchStyle}
              value={searchTerm}
              onChange={handleSearch}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon
                      fontSize="medium"
                      sx={{
                        color: (theme) => theme.palette.custom.text2,
                        fontSize: "1rem !important",
                      }}
                    />
                  </InputAdornment>
                ),
              }}
            />
            <Button
              size="small"
              startIcon={<AddIcon />}
              onClick={handleAddCommClick}
              color="info"
              sx={animatedButtonStyle}
            >
              Add Communication
            </Button>
          </Box>

          {loading ? (
            <Box>
              {[...Array(5)].map((_, index) => (
                <Skeleton
                  key={index}
                  variant="rectangular"
                  animation="wave"
                  height={40}
                  sx={{
                    mb: 2,
                    borderRadius: 2,
                    backgroundColor: (theme) => theme.palette.custom.background1,
                  }}
                />
              ))}
            </Box>
          ) : filteredData.length > 0 ? (
            <Box pb={2} sx={{ display: "flex", flexDirection: "row", maxHeight: "calc(100vh - 180px)", overflow: "hidden" }}>
              <Box sx={{ flexGrow: 1, overflow: "auto" }}>
                <CommunicationList
                  communications={filteredData}
                  selectedId={selectedCommId}
                  onSelect={handleSelectComm}
                />
              </Box>
            </Box>
          ) : (
            <EmptyStateBox
              icon={BsTable}
              title="Currently there are no created Communications"
              description="Start a new communication by tapping the 'Add Communication' button"
            />
          )}
        </Box>
      </Box>

      <CommunicationFormDialog
        open={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialData={editCommData}
        user={user}
        onSubmit={() => fetchData(tab)}
      />
    </>
  );
};

export default CreateCommunicationPage;
