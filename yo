import { PrismaClient, Department, Position, StepRoles } from "@prisma/client";
import { ApiError } from "../../utils/ApiError";
import { generateWhereFilter } from "../../helpers/IBAHelpers";

const prisma = new PrismaClient();

interface NotificationCounts {
  indentLatest: number;
  indentRejected: number;
  indentClosure: number;
}

/**
 * Get notification counts for indent based on user role and department
 */
export const getNotificationIndentService = async (
  userRole: StepRoles,
  userDepartment: Department,
  userEmail: string
): Promise<{ success: boolean; data: NotificationCounts }> => {
  try {
    const result: NotificationCounts = {
      indentLatest: 0,
      indentRejected: 0,
      indentClosure: 0,
    };

    await calculateLatestIndentNotifications(result, userRole, userDepartment, userEmail);
    await calculateRejectedIndentNotifications(result, userRole, userDepartment, userEmail);
    await calculateClosureIndentNotifications(result, userRole, userDepartment);

    return { success: true, data: result };
  } catch (error: any) {
    console.error("Error in getNotificationIndentService:", error);
    throw ApiError.internal(`Error retrieving indent notifications: ${error.message}`);
  }
};


const calculateLatestIndentNotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    const workflowFilter = generateWhereFilter(role, department, "latest", userEmail);

    const count = await prisma.indents.count({
      where: {
        ...workflowFilter,
      },
    });

    result.indentLatest = count;
  } catch (error: any) {
    console.error("Error calculating latest indent notifications:", error);
    throw error;
  }
};
const calculateRejectedIndentNotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    // Skip for roles that don't handle rework
    if (
      role === Position.COMPLIANCE_CHECKER ||
      role === Position.DEPARTMENT_CHECKER
    ) {
      result.indentRejected = 0;
      return;
    }

    const rejectedFilter = generateWhereFilter(role, department, "rejected", userEmail);

    const count = await prisma.indents.count({
      where: {
        ...rejectedFilter,
      },
    });

    result.indentRejected = count;
  } catch (error: any) {
    console.error("Error calculating rejected indent notifications:", error);
    throw error;
  }
};
const calculateClosureIndentNotifications = async (
  result: NotificationCounts,
  role: Position,
  department: Department
): Promise<void> => {
  try {
    if (department !== Department.COMPLIANCE) {
      result.indentClosure = 0;
      return;
    }

    let closureStep = -1;
    if (role === Position.COMPLIANCE_MAKER) closureStep = 4;
    else if (role === Position.COMPLIANCE_CHECKER) closureStep = 5;
    else {
      result.indentClosure = 0;
      return;
    }

    const count = await prisma.indents.count({
      where: {
        AND: [
          { currStep: closureStep },
          { rejectedStatus: false },
        ],
      },
    });

    result.indentClosure = count;
  } catch (error: any) {
    console.error("Error calculating closure indent notifications:", error);
    throw error;
  }
};
