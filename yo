export const fetchObservationsList = async (
  role: StepRoles,
  department: string | undefined,
  tab: string,
  user: User
) => {
  try {
    if (!role || !tab) {
      throw new Error("role & tab is required");
    }

    if (role !== user.role) {
      throw new Error(
        "You are not authorized to view observation for this role"
      );
    }

    const where = generateWhereFilter(role, department, tab, user.email);

    return await prisma.iSEObservations.findMany({
      where,
      select: {
        observationId: true,
        department: true,
        status: true,
        description: true,
        assignedTo: true,
        comments: true,
        createdAt: true,
        updatedAt: true,
        currStep: true,
        prevStep: true,
        lastStepChangeTime: true,
        dueDate: true,
        observationTheme: true,
        priority: true,
        remarkHistory: {
          orderBy: { createdAt: "asc" }, //Chronological
          select: {
            id: true,
            content: true,
            createdAt: true,
            updatedAt: true,
            isEdited: true,
            role: true,
            step: true,
          },
        },
        attachments: {
          where: {
            isDeleted: false,
          },
          orderBy: { uploadedAt: "asc" }, //Chronological
          select: {
            id: true,
            fileName: true,
            uploadedBy: true,
            uploadedByRole: true,
            observationId: true,
            uploadedAt: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });
  } catch (error) {
    console.error("Error fetching observations", error);
    throw new Error("Failed to fetch observations");
  }
};
