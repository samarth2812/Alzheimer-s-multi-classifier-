import { useRef, useState } from "react";
import {
  Box,
  ClickAwayListener,
  Fade,
  Paper,
  Popper,
  Typography,
} from "@mui/material";

export const SimpleDropdown = ({
  label,
  placeholder = "Select an option",
  options = [],
  value,
  onChange,
  name,
  error,
  disabled,
  sx = {}, // ✅ accept sx overrides
}) => {
  const [open, setOpen] = useState(false);
  const anchorRef = useRef(null);

  const handleToggle = () => setOpen((prev) => !prev);

  const handleClose = (event) => {
    if (anchorRef.current && anchorRef.current.contains(event.target)) return;
    setOpen(false);
  };

  const handleOptionSelect = (optionName) => {
    onChange({ target: { name, value: optionName } });
    setOpen(false);
  };

  return (
    <Box sx={{ position: "relative", width: "100%", opacity: disabled ? "0.5" : "1" }}>
      {label && (
        <Typography
          component="label"
          sx={{
            fontSize: "0.75rem",
            fontWeight: 500,
            color: (theme) => theme.palette.custom.text2,
            mb: 0.5,
            ml: 1.6,
            display: "block",
          }}
        >
          {label}
        </Typography>
      )}
      <Box
        ref={anchorRef}
        onClick={handleToggle}
        sx={{
          border: "2px solid",
          borderColor: (theme) => theme.palette.custom.background1,
          borderRadius: 3,
          fontSize: "0.7rem",
          height: "40px",
          px: 1.5,
          cursor: "pointer",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          backgroundColor: "white",
          "&:hover, &:focus, &:active": {
            borderColor: "#5a3d83",
          },
          ...sx, // ✅ allow custom styling
        }}
      >
        <Typography
          sx={{
            color: (theme) => theme.palette.custom.text2,
            fontSize: "0.7rem",
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
            width: "100%",
          }}
        >
          {value || placeholder}
        </Typography>
        <Box
          sx={{
            width: 0,
            height: 0,
            borderLeft: "5px solid transparent",
            borderRight: "5px solid transparent",
            borderTop: "5px solid #757575",
            ml: 1,
          }}
        />
      </Box>

      {error && (
        <Typography
          variant="h6"
          color="error"
          sx={{
            mt: 1,
            fontSize: "0.6rem",
            textAlign: "center",
            fontWeight: 400,
          }}
        >
          {error}
        </Typography>
      )}

      <Popper
        open={disabled ? false : open}
        anchorEl={anchorRef.current}
        placement="bottom-start"
        transition
        disablePortal={disabled}
        style={{ zIndex: 1500, width: anchorRef.current?.offsetWidth || 200 }}
      >
        {({ TransitionProps }) => (
          <Fade {...TransitionProps} timeout={200}>
            <Paper
              elevation={3}
              sx={{
                bgcolor: (theme) => theme.palette.custom.paper,
                borderRadius: 3,
                mt: 0.5,
                maxHeight: 250,
                overflowY: "auto",
                p: 2,
                "&::-webkit-scrollbar": { display: "none" },
              }}
            >
              <ClickAwayListener onClickAway={handleClose}>
                <Box>
                  {options.length > 0 ? (
                    options.map((option) => (
                      <Box
                        key={option.id}
                        onClick={() => handleOptionSelect(option.name)}
                        sx={{
                          px: 1.5,
                          py: 0.5,
                          mb: 1,
                          borderRadius: 1,
                          cursor: "pointer",
                          "&:hover": {
                            backgroundColor: (theme) => theme.palette.custom.background1,
                            color: "#000000",
                          },
                          ...(value === option.name && {
                            backgroundColor: (theme) => theme.palette.custom.background1,
                          }),
                        }}
                      >
                        <Typography
                          sx={{
                            fontSize: "0.7rem",
                            color: (theme) => theme.palette.custom.text2,
                          }}
                        >
                          {option.name}
                        </Typography>
                      </Box>
                    ))
                  ) : (
                    <Box sx={{ p: 1.5, textAlign: "center" }}>
                      <Typography
                        sx={{
                          fontSize: "0.7rem",
                          color: (theme) => theme.palette.custom.text2,
                        }}
                      >
                        No options available
                      </Typography>
                    </Box>
                  )}
                </Box>
              </ClickAwayListener>
            </Paper>
          </Fade>
        )}
      </Popper>
    </Box>
  );
};


<SimpleDropdown
  label="Approval Status"
  name="approval"
  value={formData.approval}
  onChange={handleChange}
  options={[
    { id: 1, name: "Approved" },
    { id: 2, name: "Rejected" },
    { id: 3, name: "Pending" },
  ]}
  sx={{
    borderColor: "#1976d2",
    backgroundColor: "#f5f5f5",
  }}
/>
