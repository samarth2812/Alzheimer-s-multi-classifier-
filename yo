import { apiRequest } from "../axios/apiRequest";

export const fetchNotificationsFromAPI = async () => {
  try {
    const response = await apiRequest("GET", `${process.env.REACT_APP_BACKEND_URL}/api/v1/obligations/notifications`);

    if (response.status === 200 && response.data && response.data.data) {
      const { latest, rejected, closure } = response.data.data;
      const notifications = [];

      // Create notification for latest obligations if count > 0
      if (latest > 0) {
        notifications.push({
          id: "latest-obligations",
          icon: "assignment",
          title: `${latest} Latest Obligation${latest > 1 ? "s" : ""}`,
          description: "Click here to view latest obligations",
          timestamp: "Just now",
          unread: true,
          iconColor: "#4CAF50", // Green color for latest obligations
          type: "latest",
        });
      }

      // Create notification for rejected obligations if count > 0
      if (rejected > 0) {
        notifications.push({
          id: "rejected-obligations",
          icon: "cancel",
          title: `${rejected} Rejected Obligation${rejected > 1 ? "s" : ""}`,
          description: "Click here to view rejected obligations",
          timestamp: "Recently",
          unread: true,
          iconColor: "#4CAF50",
          type: "rejected",
        });
      }

      // Create notification for closure obligations if count > 0
      if (closure > 0) {
        notifications.push({
          id: "closure-obligations",
          icon: "check_circle",
          title: `${closure} Closure Obligation${closure > 1 ? "s" : ""}`,
          description: "Click here to view closure obligations",
          timestamp: "Recently",
          unread: true,
          iconColor: "#4CAF50",
          type: "closure",
        });
      }

      return notifications;
    }

    return [];
  } catch (error) {
    console.error("Error fetching notifications:", error);
    return [];
  }
};

// Helper function to get navigation path for notification type
export const getNotificationPath = (type) => {
  switch (type) {
    case "latest":
      return "/obligations/latest";
    case "rejected":
      return "/obligations/rejected";
    case "closure":
      return "/obligations/closure";
    default:
      return "/obligations/latest";
  }
};

// Helper function to handle notification refresh
export const handleNotificationRefresh = async (onRefresh) => {
  try {
    if (onRefresh && typeof onRefresh === "function") {
      await onRefresh();
    }
  } catch (error) {
    console.error("Error refreshing notifications:", error);
  }
};
