export const getIncidentRepository = async (
  userRole: Position,
  userDepartment: Department,
  filters: {
    status?: "open" | "closed" | "rejected";
    severity?: IncidentSeverity;
    department?: Department;
    type?: IncidentType;
    search?: string;
    startDate?: string;
    endDate?: string;
  },
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    const offset = (page - 1) * pageSize;
    const where: any = { AND: [{ isDeleted: false }] };

    // Department scope
    if (
      (userRole === "DEPARTMENT_MAKER" || userRole === "DEPARTMENT_CHECKER") &&
      userDepartment
    ) {
      where.AND.push({ department: userDepartment });
    }

    // Status filters
    if (filters.status === "closed") {
      where.AND.push({ currStep: 4, rejectedStatus: false, openStatus: false });
    } else if (filters.status === "rejected") {
      where.AND.push({ rejectedStatus: true });
    } else {
      where.AND.push({ openStatus: true });
    }

    // Additional filters
    if (filters.severity) {
      where.AND.push({ severity: INCIDENT_SEVERITY_MAPPING[filters.severity] });
    }

    if (filters.department) {
      where.AND.push({ department: DEPARTMENT_MAPPING[filters.department] });
    }

    if (filters.type) {
      where.AND.push({ type: INCIDENT_TYPE_MAPPING[filters.type] });
    }

    if (filters.startDate) {
      where.AND.push({ createdAt: { gte: new Date(filters.startDate) } });
    }

    if (filters.endDate) {
      where.AND.push({ closedDate: { lte: new Date(filters.endDate) } });
    }

    if (filters.search?.trim()) {
      const searchTerm = filters.search.trim();
      where.AND.push({
        OR: [
          { department: { contains: searchTerm, mode: "insensitive" } },
          { comments: { contains: searchTerm, mode: "insensitive" } },
          { incidentId: { contains: searchTerm, mode: "insensitive" } },
        ],
      });
    }

    // Fetch incidents
    const [incidents, total] = await Promise.all([
      prisma.incidentReporting.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: { updatedAt: "desc" },
        include: {
          remarkHistory: {
            where: { isDeleted: false },
            orderBy: { createdAt: "asc" },
          },
          attachments: true,
        },
      }),
      prisma.incidentReporting.count({ where }),
    ]);

    // Attach meta
    const incidentsWithMeta = await Promise.all(
      incidents.map(async (incident) => {
        const pendingWith = getNameFromStep(incident.currStep);
        const currentStepName = getStepName(incident.currStep);
        let assignees: {
          name: string | null;
          email: string | null;
          role: string;
        }[] = [];

        try {
          const response = await fetchUsersList({
            department: incident.department,
            role: pendingWith as Position,
          });

          const userList = response || [];

          if (pendingWith === "DEPARTMENT_MAKER") {
            const userMatch = userList.find(
              (user: any) => user.email === incident.assignedTo
            );
            if (userMatch) {
              assignees.push({
                name: userMatch.name,
                email: userMatch.email,
                role: userMatch.role,
              });
            }
          } else {
            if (userList.length > 1) {
              assignees = userList.map((user: any) => ({
                name: user.name,
                email: user.email,
                role: user.role,
              }));
            } else if (userList[0]) {
              assignees.push({
                name: userList[0].name,
                email: userList[0].email,
                role: userList[0].role,
              });
            }
          }
        } catch (error) {
          console.warn(`Failed to fetch users for incident ${incident.incidentId}:`, error);
        }

        return {
          ...incident,
          currentStepName,
          currentStatus: incident.openStatus ? "OPEN" : "CLOSE",
          assignees,
        };
      })
    );

    return {
      success: true,
      data: incidentsWithMeta,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
      filters: {
        applied: Object.keys(filters).filter(
          (k) => filters[k as keyof typeof filters]
        ),
        search: filters.search || null,
      },
    };
  } catch (error: any) {
    console.error("Error in getIncidentRepository:", error);
    throw new Error(`Incident repository fetch failed: ${error.message}`);
  }
};


export const getObservationRepository = async (
  userRole: Position,
  userDepartment: Department,
  filters: {
    status?: "open" | "closed";
    priorityLevel?: observationPriority;
    department?: Department;
    theme?: ObservationTheme;
    search?: string;
    startDate?: string;
    endDate?: string;
  },
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    const offset = (page - 1) * pageSize;
    const where: any = { AND: [{ isDeleted: false }] };

    // Department-based restriction
    if (
      (userRole === "DEPARTMENT_MAKER" || userRole === "DEPARTMENT_CHECKER") &&
      userDepartment
    ) {
      where.AND.push({ department: userDepartment });
    }

    // Default to open unless explicitly closed
    if (filters.status === "closed") {
      where.AND.push({ currStep: 4, rejectedStatus: false, openStatus: false });
    } else {
      where.AND.push({ openStatus: true });
    }

    // Apply filters
    if (filters.priorityLevel) {
      where.AND.push({ priority: OBSERVATION_PRIORITY_MAPPING[filters.priorityLevel] });
    }

    if (filters.department) {
      where.AND.push({ department: DEPARTMENT_MAPPING[filters.department] });
    }

    if (filters.theme) {
      where.AND.push({ observationTheme: OBSERVATION_THEME_MAPPING[filters.theme] });
    }

    if (filters.startDate) {
      where.AND.push({ createdAt: { gte: new Date(filters.startDate) } });
    }

    if (filters.endDate) {
      where.AND.push({ closedDate: { lte: new Date(filters.endDate) } });
    }

    if (filters.search?.trim()) {
      const searchTerm = filters.search.trim();
      where.AND.push({
        OR: [
          { description: { contains: searchTerm, mode: "insensitive" } },
          { comments: { contains: searchTerm, mode: "insensitive" } },
          { observationId: { contains: searchTerm, mode: "insensitive" } },
        ],
      });
    }

    const [observations, total] = await Promise.all([
      prisma.iSEObservations.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: { updatedAt: "desc" },
        include: {
          remarkHistory: {
            where: { isDeleted: false },
            orderBy: { createdAt: "asc" },
          },
          attachments: true,
        },
      }),
      prisma.iSEObservations.count({ where }),
    ]);

    const observationsWithMeta = await Promise.all(
      observations.map(async (observation) => {
        const pendingWith = getNameFromStep(observation.currStep);
        const currentStepName = getStepName(observation.currStep);
        let assignees: { name: string | null; email: string | null; role: string }[] = [];

        try {
          const response = await fetchUsersList({
            department: observation.department,
            role: pendingWith as Position,
          });
          const userList = response || [];

          if (pendingWith === "DEPARTMENT_MAKER") {
            const userMatch = userList.find(
              (user: any) => user.email === observation.assignedTo
            );
            if (userMatch) {
              assignees.push({
                name: userMatch.name,
                email: userMatch.email,
                role: userMatch.role,
              });
            }
          } else {
            if (userList.length > 1) {
              assignees = userList.map((user: any) => ({
                name: user.name,
                email: user.email,
                role: user.role,
              }));
            } else if (userList[0]) {
              assignees.push({
                name: userList[0].name,
                email: userList[0].email,
                role: userList[0].role,
              });
            }
          }
        } catch (error) {
          console.warn(
            `Failed to fetch users for observation ${observation.observationId}:`,
            error
          );
        }

        return {
          ...observation,
          currentStepName,
          currentStatus: observation.openStatus ? "OPEN" : "CLOSE",
          assignees,
        };
      })
    );

    return {
      success: true,
      data: observationsWithMeta,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
      filters: {
        applied: Object.keys(filters).filter(
          (k) => filters[k as keyof typeof filters]
        ),
        search: filters.search || null,
      },
    };
  } catch (error: any) {
    console.error("Error in getObservationRepository:", error);
    throw new Error(`Observation repository fetch failed: ${error.message}`);
  }
};
