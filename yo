import { fetchNotifications } from "features/notificationSlice";
import debounce from "lodash.debounce";
import { useCallback, useEffect, useMemo, useState } from "react";
import toast from "react-hot-toast";
import { useDispatch, useSelector } from "react-redux";
import { apiRequest } from "../../axios/apiRequest";

export const useObservationManagement = (pageType) => {
  // Common state
  const [data, setData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editObservationData, setEditObservationData] = useState(null);
  const [observationToDelete, setObservationToDelete] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [descriptionDialogOpen, setDescriptionDialogOpen] = useState(false);
  const [currentDescription, setCurrentDescription] = useState("");
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({});
  const [viewAttachementDialogOpen, setViewAttachementDialogOpen] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const [observationId, setObservationId] = useState("");

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [totalRecords, setTotalRecords] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // Button state management
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submittingObservationId, setSubmittingObservationId] = useState(null);

  const user = useSelector((state) => state.user.user);
  const dispatch = useDispatch();

  // API endpoint configuration based on page type
  const getApiEndpoint = useCallback(
    (searchQuery = "", page = currentPage, limit = rowsPerPage) => {
      const baseUrl = window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL;
      const role = user?.role;
      const department = user?.department;
      const pagination = `page=${page}&limit=${limit}`;
      const searchParam = searchQuery;

      switch (pageType) {
        case "created":
          return `${baseUrl}/api/v1/rbi-ise/${role}/created/${searchParam}?${pagination}`;
        case "latest":
          return role === "COMPLIANCE_CHECKER"
            ? `${baseUrl}/api/v1/rbi-ise/${role}/latest/${searchParam}?${pagination}`
            : searchParam
            ? `${baseUrl}/api/v1/rbi-ise/${role}/latest/${searchParam}/${department}?${pagination}`
            : `${baseUrl}/api/v1/rbi-ise/${role}/latest/${department}?${pagination}`;
        case "closure":
          return `${baseUrl}/api/v1/rbi-ise/${role}/closure/${searchParam}?${pagination}`;
        case "rejected":
          return role === "COMPLIANCE_MAKER"
            ? `${baseUrl}/api/v1/rbi-ise/${role}/rejected/${searchParam}?${pagination}`
            : searchParam
            ? `${baseUrl}/api/v1/rbi-ise/${role}/rejected/${searchParam}/${department}?${pagination}`
            : `${baseUrl}/api/v1/rbi-ise/${role}/rejected/${department}?${pagination}`;
        default:
          return `${baseUrl}/api/v1/rbi-ise/${role}/created/${searchParam}?${pagination}`;
      }
    },
    [pageType, user?.role, user?.department]
  );

  // Main fetch function that accepts all parameters
  const fetchDataWithParams = useCallback(
    async (searchQuery = "", page = 1, limit = 5) => {
      if (!user?.role) return;

      setLoading(true);
      try {
        const endpoint = getApiEndpoint(searchQuery, page, limit);
        const response = await apiRequest("GET", endpoint);

        setData(response.data.data);
        setTotalRecords(response.data.pagination.total);
        setTotalPages(response.data.pagination.totalPages);

        // Update attachments if observationId exists
        if (observationId) {
          const updatedObservation = response.data.data.find(
            (observation) => observation.observationId === observationId
          );
          if (updatedObservation) {
            setAttachments(updatedObservation.attachments || []);
          }
        }
      } catch (error) {
        toast.error("Failed to fetch Observation");
      } finally {
        setLoading(false);
      }
    },
    [getApiEndpoint, observationId, user?.role]
  );

  // Fetch data function using current state
  const fetchData = useCallback(
    async (searchQuery = "") => {
      await fetchDataWithParams(searchQuery, currentPage, rowsPerPage);
    },
    [fetchDataWithParams, currentPage, rowsPerPage]
  );

  // Separate function for fetching with search
  const fetchDataWithSearch = useCallback(
    async (searchQuery = "") => {
      await fetchDataWithParams(searchQuery, currentPage, rowsPerPage);
    },
    [fetchDataWithParams, currentPage, rowsPerPage]
  );

  // Debounced search function for backend API calls
  const debouncedSearch = useMemo(
    () =>
      debounce(async (searchQuery) => {
        setCurrentPage(1);
        await fetchDataWithParams(searchQuery, 1, rowsPerPage);
      }, 500),
    [fetchDataWithParams, rowsPerPage]
  );

  // Effect for initial load only
  useEffect(() => {
    if (!user?.role) return;

    const trimmedSearchTerm = searchTerm.trim();
    fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
  }, [user?.role]); // Only depend on user role for initial load

  // Effect for search term changes only
  useEffect(() => {
    if (!user?.role) return;

    const trimmedSearchTerm = searchTerm.trim();

    if (trimmedSearchTerm) {
      debouncedSearch(trimmedSearchTerm);
    } else {
      debouncedSearch.cancel();
      setCurrentPage(1);
      fetchDataWithParams("", 1, rowsPerPage);
    }

    return () => debouncedSearch.cancel();
  }, [searchTerm, user?.role, rowsPerPage, fetchDataWithParams]);

  // Common handlers
  const handleSearch = useCallback((event) => {
    setSearchTerm(event.target.value);
  }, []);

  const handleAddObservationClick = useCallback(() => {
    setEditObservationData(null);
    setIsModalOpen(true);
  }, []);

  const handleChange = useCallback((e, observationId) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [observationId]: {
        ...prev[observationId],
        [name]: value,
      },
    }));
  }, []);

  const handleObservationDelete = useCallback(async () => {
    if (!observationToDelete) return;

    try {
      const deleteObservationUrl = `${
        window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
      }/api/v1/rbi-ise/${observationToDelete.observationId}`;
      const result = await apiRequest("DELETE", deleteObservationUrl);

      if (result.status === 200 || result.status === 204) {
        toast.success("Observation Deleted Successfully");
        // Refetch data after deletion
        const trimmedSearchTerm = searchTerm.trim();
        await fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
      }
    } catch (error) {
      console.error("Error deleting observation:", error);
      toast.error("An error occurred while deleting the Observation.");
    } finally {
      setIsDeleteDialogOpen(false);
      setObservationToDelete(null);
    }
  }, [observationToDelete, fetchDataWithParams, searchTerm, currentPage, rowsPerPage]);

  const handleSubmitObservation = useCallback(
    async (observationId, department) => {
      // Prevent multiple submissions
      if (isSubmitting || submittingObservationId === observationId) {
        return;
      }

      // Validate required data
      if (!observationId || !department || !user?.role) {
        toast.error("Missing required data for submission");
        return;
      }

      setIsSubmitting(true);
      setSubmittingObservationId(observationId);

      try {
        const isComplianceDepartment = department === "COMPLIANCE";
        const payload = {
          updatedFields: {
            updateType: "WORKFLOW_UPDATE",
            rejectedStatus:
              (pageType === "latest" || pageType === "rejected" || pageType === "closure") &&
              formData[observationId]?.approvalStatus === "reject"
                ? true
                : false,
          },
        };

        const result = await apiRequest(
          "PUT",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/rbi-ise/${user.role}/${department}/${observationId}`,
          payload
        );

        if (result.status === 200 || result.status === 204) {
          // Success message logic based on page type and approval status
          if (pageType === "created") {
            toast.success("Observation Sent to Compliance Checker Successfully");
          } else if (pageType === "latest") {
            const approvalStatus = formData[observationId]?.approvalStatus;
            // Add specific success messages based on role and approval status
            if (isComplianceDepartment) {
              if (approvalStatus === "approve") {
                toast.success("Observation Sent to Compliance Maker for Closure Successfully");
              } else {
                toast.success("Observation Sent to back to Compliance Maker Successfully");
              }
            } else {
              if (approvalStatus === "approve") {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Observation Sent to Department Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Observation Sent to Department Checker Successfully");
                } else {
                  toast.success("Observation Sent to Compliance Maker Successfully");
                }
              } else {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Observation Sent to back to Compliance Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Observation Sent to back to Compliance Maker Successfully");
                } else {
                  toast.success("Observation Sent to back to Department Maker Successfully");
                }
              }
            }
          } else if (pageType === "rejected") {
            if (isComplianceDepartment) {
              toast.success("Observation Sent to Compliance Checker Successfully");
            } else {
              if (formData[observationId]?.approvalStatus === "approve") {
                if (user.role === "COMPLIANCE_MAKER") {
                  toast.success("Observation Sent to Compliance Checker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Observation Sent to Department Checker Successfully");
                } else {
                  toast.success("Observation Sent Successfully");
                }
              } else {
                if (user.role === "COMPLIANCE_MAKER") {
                  toast.success("Observation Sent to back to Department Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Observation Sent to back to Compliance Maker Successfully");
                } else {
                  toast.success("Observation Sent Successfully");
                }
              }
            }
          } else if (pageType === "closure") {
            if (formData[observationId]?.approvalStatus === "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Observation Sent For Closure to Compliance Checker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Observation Closed Successfully");
              }
            } else if (formData[observationId]?.approvalStatus !== "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Observation Sent to Compliance Checker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Observation Sent Back to Compliance Maker Successfully");
              }
            } else {
              toast.success("Observation Sent to Compliance Checker Successfully");
            }
          }

          // Refetch data after submit
          const trimmedSearchTerm = searchTerm.trim();
          await fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
          dispatch(fetchNotifications());
        }
      } catch (error) {
        console.error("Error submitting observation:", error);
        toast.error("An error occurred while submitting the Observation.");
      } finally {
        setIsSubmitting(false);
        setSubmittingObservationId(null);
      }
    },
    [
      pageType,
      formData,
      user.role,
      fetchDataWithParams,
      dispatch,
      searchTerm,
      currentPage,
      rowsPerPage,
      isSubmitting,
      submittingObservationId,
    ]
  );

  const handleSubmitRemark = useCallback(
    async (observationId, remarkData) => {
      try {
        const result = await apiRequest(
          "POST",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/rbi-ise/remarks/${observationId}`,
          remarkData
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Observation Remark Added Successfully");
        }
        // Refetch data after remark submission
        const trimmedSearchTerm = searchTerm.trim();
        await fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
      } catch (error) {
        toast.error("An error occurred while submitting the Remark.");
      }
    },
    [fetchDataWithParams, searchTerm, currentPage, rowsPerPage]
  );

  const handleEditRemark = useCallback(
    async (remarkId, remarkContent) => {
      try {
        const result = await apiRequest(
          "PUT",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/rbi-ise/remarks/${remarkId}`,
          { remarkContent }
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Observation Remark Updated Successfully");
        }
        // Refetch data after remark edit
        const trimmedSearchTerm = searchTerm.trim();
        await fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
      } catch (error) {
        toast.error("An error occurred while submitting the Remark.");
      }
    },
    [fetchDataWithParams, searchTerm, currentPage, rowsPerPage]
  );

  const handleSortByStatus = useCallback(() => {
    const statusOrder = { HIGH: 1, MEDIUM: 2, LOW: 3 };
    const sortedData = [...data].sort((a, b) => {
      return statusOrder[a.priority] - statusOrder[b.priority];
    });
    setData(sortedData);
  }, [data]);

  const handlePageChange = useCallback(
    async (event, newPage) => {
      setCurrentPage(newPage);

      // Immediately fetch data for the new page
      const trimmedSearchTerm = searchTerm.trim();
      await fetchDataWithParams(trimmedSearchTerm, newPage, rowsPerPage);
    },
    [searchTerm, fetchDataWithParams, rowsPerPage]
  );

  const handleRowsPerPageChange = useCallback(
    async (event) => {
      const { numericValue, resetToFirstPage } = event;

      setRowsPerPage(numericValue);

      const newPage = resetToFirstPage ? 1 : currentPage;
      if (resetToFirstPage) {
        setCurrentPage(1);
      }

      // Immediately fetch data with new parameters
      const trimmedSearchTerm = searchTerm.trim();
      await fetchDataWithParams(trimmedSearchTerm, newPage, numericValue);
    },
    [currentPage, searchTerm, fetchDataWithParams]
  );

  // Utility functions
  const formatDateTime = useCallback((dateString) => {
    return new Date(dateString).toLocaleString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });
  }, []);

  // Remove filteredData and displayData logic since search is now handled by backend
  const displayData = data;

  return {
    // State
    data,
    searchTerm,
    isModalOpen,
    setIsModalOpen,
    editObservationData,
    setEditObservationData,
    observationToDelete,
    setObservationToDelete,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    descriptionDialogOpen,
    setDescriptionDialogOpen,
    currentDescription,
    setCurrentDescription,
    loading,
    formData,
    setFormData,
    viewAttachementDialogOpen,
    setViewAttachementDialogOpen,
    attachments,
    setAttachments,
    observationId,
    setObservationId,
    currentPage,
    rowsPerPage,
    totalRecords,
    totalPages,
    displayData,
    user,
    isSubmitting,
    submittingObservationId,

    // Handlers
    handleSearch,
    handleAddObservationClick,
    handleChange,
    handleObservationDelete,
    handleSubmitObservation,
    handleSubmitRemark,
    handleEditRemark,
    handleSortByStatus,
    handlePageChange,
    handleRowsPerPageChange,
    fetchData,
    fetchDataWithSearch,
    formatDateTime,
  };
};
