export const triggerReminderJob = async (type: "2_days" | "1_day" | "same_day"): Promise<any> => {
  try {
    console.log(`Manually triggering ${type} reminder job...`);

    let daysBefore: number;
    switch (type) {
      case "2_days":
        daysBefore = 2;
        break;
      case "1_day":
        daysBefore = 1;
        break;
      case "same_day":
        daysBefore = 0;
        break;
      default:
        throw new Error("Invalid reminder type");
    }

    // Call all 4 functions in parallel (or sequentially, depending on need)
    const [regulatory, followUp, escalation, summary] = await Promise.all([
      sendRegulatoryTimelineReminders(daysBefore),
      sendFollowUpReminders(daysBefore),
      sendEscalationReminders(daysBefore),
      sendSummaryNotifications(daysBefore),
    ]);

    const result = {
      regulatory,
      followUp,
      escalation,
      summary,
    };

    console.log(`Manual ${type} reminder job completed:`, result);
    return result;
  } catch (error: any) {
    console.error(`Manual ${type} reminder job failed:`, error);
    throw error;
  }
};
