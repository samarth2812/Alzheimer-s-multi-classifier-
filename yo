import { renderModuleEmailTemplate } from "../email/emailTemplateService";
import { addEmailToQueue, processPendingEmails } from "../email/emailQueueService";
import { generateEmailSubject } from "../email/subjectGenerator";
import { Module } from "@prisma/client"; // Assuming you have a Module enum

type EmailType = "OBLIGATION" | "INDENT" | "INCIDENT" | "OBSERVATION";

interface Assignee {
  name: string;
  email: string;
}

type EmailBaseData = {
  department: string;
  dueDate?: string;
};

type ObligationEmailData = EmailBaseData & {
  obligationId: string;
  obligationTitle: string;
};

type IndentEmailData = EmailBaseData & {
  category: string;
};

type IncidentEmailData = EmailBaseData & {
  type: string;
};

type ObservationEmailData = EmailBaseData & {
  theme: string;
};

type ModuleEmailData =
  | { emailType: "OBLIGATION"; data: ObligationEmailData }
  | { emailType: "INDENT"; data: IndentEmailData }
  | { emailType: "INCIDENT"; data: IncidentEmailData }
  | { emailType: "OBSERVATION"; data: ObservationEmailData };

export const triggerReminderEmails = async (
  emailType: EmailType,
  reminderFromUserData: { name: string; email: string },
  emailData: ObligationEmailData | IndentEmailData | IncidentEmailData | ObservationEmailData,
  assignees: Assignee[]
) => {
  const frontendUrl = process.env.FRONTEND_URL || "https://your-app.com";

  const moduleTypeMap: Record<EmailType, Module> = {
    OBLIGATION: Module.OBLIGATION,
    INDENT: Module.INDENT,
    INCIDENT: Module.INCIDENT,
    OBSERVATION: Module.OBSERVATION,
  };

  const templateType = "reminder";

  for (const assignee of assignees) {
    try {
      const commonFields = {
        recipientName: assignee.name,
        action: "Reminder: Action Required",
        department: emailData.department,
        dueDate: emailData.dueDate,
        frontendUrl,
        fromUser: reminderFromUserData.name,
      };

      const mergedEmailData = {
        ...commonFields,
        ...(emailType === "OBLIGATION" ? { obligationId: (emailData as ObligationEmailData).obligationId, obligationTitle: (emailData as ObligationEmailData).obligationTitle } :
        emailType === "INDENT" ? { category: (emailData as IndentEmailData).category.replace(/_/g, " ") } :
        emailType === "INCIDENT" ? { type: (emailData as IncidentEmailData).type } :
        { theme: (emailData as ObservationEmailData).theme }),
      };

      const subject = generateEmailSubject(templateType);

      const emailBody = await renderModuleEmailTemplate(
        emailType.toLowerCase(), // should match template folder name
        templateType,
        mergedEmailData
      );

      await addEmailToQueue({
        to: assignee.email,
        subject,
        body: emailBody,
        moduleType: moduleTypeMap[emailType],
      });

      console.log(
        `‚úÖ Email queued for ${assignee.name} (${assignee.email}) - ${emailType}`
      );
    } catch (error) {
      console.error(
        `‚ùå Failed to queue email for ${assignee.name} (${assignee.email}) - ${emailType}`,
        error
      );
    }
  }

  try {
    await processPendingEmails();
    console.log(`üì¨ Immediate email processing completed for ${emailType}`);
  } catch (error) {
    console.error(`‚ö†Ô∏è Email processing failed for ${emailType}`, error);
  }
};
