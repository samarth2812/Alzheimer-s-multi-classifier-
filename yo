import React, { useEffect, useState, useMemo, useCallback } from "react";
import { Box, Button, Skeleton, TextField, InputAdornment } from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import { Add, Search } from "@mui/icons-material";
import debounce from "lodash.debounce";
import { useSelector } from "react-redux";
import toast from "react-hot-toast";

import CommunicationFormDialog from "pages/RegulatoryCommunication/communicationFormDialog";
import MailTrailAccordion from "./MailTrailAccordion";
import EmptyStateBox from "layouts/resuableComponents/emptyStateBox";
import { BsTable } from "react-icons/bs";
import { apiRequest } from "../../axios/apiRequest";
import {
  iconButtonStyle,
  topBarSearchStyle2,
  topBarStyle,
  animatedButtonStyle,
} from "layouts/resuableComponents/styles";
import CommunicationList from "./listComponent";
import PaginationFooter from "layouts/resuableComponents/PaginationFooter";

const CommunicationPage = () => {
  const [data, setData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredData, setFilteredData] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editCommData, setEditCommData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [tab, setTab] = useState("inbox");
  const [selectedComm, setSelectedComm] = useState(null);
  const user = useSelector((state) => state.user.user);

  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [totalRecords, setTotalRecords] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  const fetchData = async (tabType = "inbox", page = 1, pageSize = 5) => {
    setLoading(true);
    const fetchUrl = `${process.env.REACT_APP_BACKEND_URL}/api/v1/communication?type=${tabType}&userEmail=${user.email}&page=${page}&limit=${pageSize}`;
    try {
      const response = await apiRequest("GET", fetchUrl);
      setData(response.data.data);
      setFilteredData(response.data.data);
      setTotalRecords(response.data.pagination.total);
      setTotalPages(response.data.pagination.totalPages);
    } catch {
      toast.error("Failed to fetch communications");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData(tab, currentPage, rowsPerPage);
    setSelectedComm(null);
  }, [tab, currentPage, rowsPerPage]);

  const debouncedFilter = useMemo(
    () =>
      debounce((term, list) => {
        if (!term) {
          setFilteredData(list);
          return;
        }
        const lower = term.toLowerCase();
        const filtered = list.filter((item) =>
          Object.values(item).some((val) => val?.toString().toLowerCase().includes(lower))
        );
        setFilteredData(filtered);
      }, 300),
    []
  );

  useEffect(() => {
    debouncedFilter(searchTerm, data);
    return () => debouncedFilter.cancel();
  }, [searchTerm, data]);

  const handleSearch = (event) => {
    setSearchTerm(event.target.value);
  };

  const handleAddCommClick = () => {
    setEditCommData(null);
    setIsModalOpen(true);
  };

  const handlePageChange = useCallback((event, newPage) => {
    setCurrentPage(newPage);
  }, []);

  const handleRowsPerPageChange = useCallback((event) => {
    const { numericValue, resetToFirstPage } = event;
    setRowsPerPage(numericValue);
    if (resetToFirstPage) {
      setCurrentPage(1);
    }
  }, []);

  const handleTabChange = (value) => {
    setTab(value);
    setCurrentPage(1);
  };

  return (
    <>
      {selectedComm ? (
        <Box
          sx={{
            px: 0,
            py: 0,
            width: "100%",
            maxWidth: "1000px",
            margin: "0 auto",
            minHeight: "calc(100vh - 120px)",
          }}
        >
          <Box sx={{ mb: 0 }}>
            <Button
              variant="text"
              startIcon={<ArrowBackIcon />}
              onClick={() => setSelectedComm(null)}
              sx={{ color: (theme) => theme.palette.custom.two }}
            >
              Back
            </Button>
          </Box>
          <MailTrailAccordion
            mailTrail={[...(selectedComm.replies || []), selectedComm]}
            onReply={(comm) => {
              setEditCommData({
                refNo: comm.refNo,
                category: comm.category,
                sentTo: [comm.sentBy],
                subject: `Re: ${comm.subject}`,
                cc: comm.cc,
                commType: comm.commType,
                responseDueBy: comm.responseDueBy,
                parentCommId: comm.commId,
                priorityLevel: comm.priorityLevel,
              });
              setIsModalOpen(true);
            }}
          />
        </Box>
      ) : (
        <Box
          sx={{
            width: "100%",
            height: "calc(100vh - 70px)",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <Box
            sx={{
              ...topBarStyle,
              position: "sticky",
              top: 0,
              zIndex: 10,
              backgroundColor: (theme) => theme.palette.background.default,
              pb: 1,
              pt: 1,
            }}
          >
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {["Inbox", "Sent Items"].map((label) => {
                const value = label === "Inbox" ? "inbox" : "sent";
                const isActive = tab === value;
                return (
                  <Button
                    key={value}
                    onClick={() => handleTabChange(value)}
                    sx={{
                      fontSize: "0.7rem",
                      fontWeight: isActive ? 600 : 400,
                      color: (theme) =>
                        isActive ? theme.palette.custom.two : theme.palette.custom.text2,
                      position: "relative",
                      borderRadius: 0,
                      textTransform: "none",
                      "&::after": {
                        content: '""',
                        position: "absolute",
                        bottom: 3,
                        left: 0,
                        width: "100%",
                        height: "2px",
                        backgroundColor: (theme) => theme.palette.custom.two,
                        transform: isActive ? "scaleX(1)" : "scaleX(0)",
                        transformOrigin: "left",
                        transition: "transform 0.3s ease-out",
                      },
                      "&:hover": {
                        color: (theme) => theme.palette.custom.two,
                      },
                      "&:hover::after": {
                        transform: "scaleX(1)",
                      },
                    }}
                  >
                    {label}
                  </Button>
                );
              })}
            </Box>

            <Box sx={{ display: "flex", alignItems: "center", gap: 2, mt: { xs: 1, sm: 0 } }}>
              <Button
                size="small"
                startIcon={<Add />}
                onClick={handleAddCommClick}
                sx={{ ...animatedButtonStyle, minWidth: "150px" }}
              >
                Add Communication
              </Button>
              <TextField
                fullWidth
                placeholder="Search Communication..."
                variant="outlined"
                sx={topBarSearchStyle2}
                onChange={handleSearch}
                value={searchTerm}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search fontSize="medium" sx={iconButtonStyle} />
                    </InputAdornment>
                  ),
                }}
              />
            </Box>
          </Box>

          <Box
            sx={{
              flexGrow: 1,
              py: 1,
              width: "100%",
              height: "calc(100vh -170px)",
              overflowY: "auto",
              px: 1,
              display: "flex",
              flexDirection: "column",
              gap: "8px",
              position: "relative",
            }}
          >
            {loading ? (
              <Box>
                {[...Array(5)].map((_, idx) => (
                  <Skeleton key={idx} variant="rectangular" height={40} sx={{ mb: 2 }} />
                ))}
              </Box>
            ) : filteredData.length > 0 ? (
              <Box sx={{ minHeight: "300px" }}>
                <CommunicationList
                  communications={filteredData}
                  selectedId={selectedComm?.commId}
                  onSelect={(comm) => setSelectedComm(comm)}
                />
              </Box>
            ) : (
              <EmptyStateBox
                icon={BsTable}
                title="No Communications Found"
                description="Try changing your filters or adding a new communication."
              />
            )}
            {!searchTerm && filteredData.length > 0 && (
              <Box sx={{ position: "sticky", bottom: 0, zIndex: 10, pt: 1, pb: 1 }}>
                <PaginationFooter
                  currentPage={currentPage}
                  rowsPerPage={rowsPerPage}
                  totalPages={totalPages}
                  totalRecords={totalRecords}
                  onPageChange={handlePageChange}
                  onRowsPerPageChange={handleRowsPerPageChange}
                  loading={loading}
                />
              </Box>
            )}
          </Box>
        </Box>
      )}

      <CommunicationFormDialog
        open={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialData={editCommData}
        user={user}
        onSubmit={() => fetchData(tab, currentPage, rowsPerPage)}
      />
    </>
  );
};

export default CommunicationPage;
