import { PrismaClient, Department, Position, StepRoles } from "@prisma/client";
import { ApiError } from "../../utils/ApiError";
import { generateWhereFilter } from "../../helpers/IBAHelpers";

const prisma = new PrismaClient();

interface NotificationCounts {
  iseLatest: number;
  iseRejected: number;
  iseClosure: number;
}

export const getNotificationISEObservationService = async (
  userRole: StepRoles,
  userDepartment: Department,
  userEmail: string
): Promise<{ success: boolean; data: NotificationCounts }> => {
  try {
    const result: NotificationCounts = {
      iseLatest: 0,
      iseRejected: 0,
      iseClosure: 0,
    };

    await calculateLatestISENotifications(result, userRole, userDepartment, userEmail);
    await calculateRejectedISENotifications(result, userRole, userDepartment, userEmail);
    await calculateClosureISENotifications(result, userRole, userDepartment);

    return { success: true, data: result };
  } catch (error: any) {
    console.error("Error in getNotificationISEObservationService:", error);
    throw ApiError.internal(`Error retrieving ISE observation notifications: ${error.message}`);
  }
};

const calculateLatestISENotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    const workflowFilter = generateWhereFilter(role, department, "latest", userEmail);

    const count = await prisma.iSEObservation.count({
      where: {
        ...workflowFilter,
      },
    });

    result.iseLatest = count;
  } catch (error: any) {
    console.error("Error calculating latest ISE notifications:", error);
    throw error;
  }
};

const calculateRejectedISENotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    if (
      role === Position.COMPLIANCE_CHECKER ||
      role === Position.DEPARTMENT_CHECKER
    ) {
      result.iseRejected = 0;
      return;
    }

    const rejectedFilter = generateWhereFilter(role, department, "rejected", userEmail);

    const count = await prisma.iSEObservation.count({
      where: {
        ...rejectedFilter,
      },
    });

    result.iseRejected = count;
  } catch (error: any) {
    console.error("Error calculating rejected ISE notifications:", error);
    throw error;
  }
};

const calculateClosureISENotifications = async (
  result: NotificationCounts,
  role: Position,
  department: Department
): Promise<void> => {
  try {
    if (department !== Department.COMPLIANCE) {
      result.iseClosure = 0;
      return;
    }

    let closureStep = -1;
    if (role === Position.COMPLIANCE_MAKER) closureStep = 4;
    else if (role === Position.COMPLIANCE_CHECKER) closureStep = 5;
    else {
      result.iseClosure = 0;
      return;
    }

    const count = await prisma.iSEObservation.count({
      where: {
        AND: [{ currStep: closureStep }, { rejectedStatus: false }],
      },
    });

    result.iseClosure = count;
  } catch (error: any) {
    console.error("Error calculating closure ISE notifications:", error);
    throw error;
  }
};


import { PrismaClient, Department, Position, StepRoles } from "@prisma/client";
import { ApiError } from "../../utils/ApiError";
import { generateWhereFilter } from "../../helpers/IBAHelpers";

const prisma = new PrismaClient();

interface NotificationCounts {
  incidentLatest: number;
  incidentRejected: number;
  incidentClosure: number;
}

export const getNotificationIncidentReportingService = async (
  userRole: StepRoles,
  userDepartment: Department,
  userEmail: string
): Promise<{ success: boolean; data: NotificationCounts }> => {
  try {
    const result: NotificationCounts = {
      incidentLatest: 0,
      incidentRejected: 0,
      incidentClosure: 0,
    };

    await calculateLatestIncidentNotifications(result, userRole, userDepartment, userEmail);
    await calculateRejectedIncidentNotifications(result, userRole, userDepartment, userEmail);
    await calculateClosureIncidentNotifications(result, userRole, userDepartment);

    return { success: true, data: result };
  } catch (error: any) {
    console.error("Error in getNotificationIncidentReportingService:", error);
    throw ApiError.internal(`Error retrieving incident notifications: ${error.message}`);
  }
};

const calculateLatestIncidentNotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    const workflowFilter = generateWhereFilter(role, department, "latest", userEmail);

    const count = await prisma.incidentReporting.count({
      where: {
        ...workflowFilter,
      },
    });

    result.incidentLatest = count;
  } catch (error: any) {
    console.error("Error calculating latest incident notifications:", error);
    throw error;
  }
};

const calculateRejectedIncidentNotifications = async (
  result: NotificationCounts,
  role: StepRoles,
  department: Department,
  userEmail: string
): Promise<void> => {
  try {
    if (
      role === Position.COMPLIANCE_CHECKER ||
      role === Position.DEPARTMENT_CHECKER
    ) {
      result.incidentRejected = 0;
      return;
    }

    const rejectedFilter = generateWhereFilter(role, department, "rejected", userEmail);

    const count = await prisma.incidentReporting.count({
      where: {
        ...rejectedFilter,
      },
    });

    result.incidentRejected = count;
  } catch (error: any) {
    console.error("Error calculating rejected incident notifications:", error);
    throw error;
  }
};

const calculateClosureIncidentNotifications = async (
  result: NotificationCounts,
  role: Position,
  department: Department
): Promise<void> => {
  try {
    if (department !== Department.COMPLIANCE) {
      result.incidentClosure = 0;
      return;
    }

    let closureStep = -1;
    if (role === Position.COMPLIANCE_MAKER) closureStep = 4;
    else if (role === Position.COMPLIANCE_CHECKER) closureStep = 5;
    else {
      result.incidentClosure = 0;
      return;
    }

    const count = await prisma.incidentReporting.count({
      where: {
        AND: [{ currStep: closureStep }, { rejectedStatus: false }],
      },
    });

    result.incidentClosure = count;
  } catch (error: any) {
    console.error("Error calculating closure incident notifications:", error);
    throw error;
  }
};
