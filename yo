import { useEffect, useState, useMemo, useCallback } from "react";
import toast from "react-hot-toast";
import { useSelector, useDispatch } from "react-redux";
import debounce from "lodash.debounce";
import { apiRequest } from "../../axios/apiRequest";
import { fetchNotifications } from "features/notificationSlice";

export const useIncidentManagement = (pageType) => {
  // Common state
  const [data, setData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredData, setFilteredData] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editIncidentData, setEditIncidentData] = useState(null);
  const [incidentToDelete, setIncidentToDelete] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [descriptionDialogOpen, setDescriptionDialogOpen] = useState(false);
  const [currentDescription, setCurrentDescription] = useState("");
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({});
  const [viewAttachementDialogOpen, setViewAttachementDialogOpen] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const [incidentId, setIncidentId] = useState("");

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [totalRecords, setTotalRecords] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  const user = useSelector((state) => state.user.user);
  const dispatch = useDispatch();

  // API endpoint configuration based on page type
  const getApiEndpoint = useCallback(() => {
    const baseUrl = process.env.REACT_APP_BACKEND_URL;
    const role = user?.role;
    const department = user?.department;
    const pagination = `page=${currentPage}&limit=${rowsPerPage}`;

    switch (pageType) {
      case "created":
        return `${baseUrl}/api/v1/incidents/${role}/created?${pagination}`;
      case "latest":
        return role === "COMPLIANCE_CHECKER"
          ? `${baseUrl}/api/v1/incidents/${role}/latest?${pagination}`
          : `${baseUrl}/api/v1/incidents/${role}/latest/${department}?${pagination}`;
      case "closure":
        return `${baseUrl}/api/v1/incidents/${role}/closure?${pagination}`;
      case "rejected":
        return role === "COMPLIANCE_MAKER"
          ? `${baseUrl}/api/v1/incidents/${role}/rejected?${pagination}`
          : `${baseUrl}/api/v1/incidents/${role}/rejected/${department}?${pagination}`;
      default:
        return `${baseUrl}/api/v1/incidents/${role}/created?${pagination}`;
    }
  }, [pageType, user?.role, user?.department, currentPage, rowsPerPage]);

  // Fetch data function
  const fetchData = useCallback(async () => {
    if (!user?.role) return;

    setLoading(true);
    try {
      const endpoint = getApiEndpoint();
      const response = await apiRequest("GET", endpoint);

      setData(response.data.data);
      setTotalRecords(response.data.pagination.total);
      setTotalPages(response.data.pagination.totalPages);

      // Update attachments if incidentId exists
      if (incidentId) {
        const updatedIncident = response.data.data.find(
          (incident) => incident.incidentId === incidentId
        );
        if (updatedIncident) {
          setAttachments(updatedIncident.attachments || []);
        }
      }
    } catch (error) {
      toast.error("Failed to fetch incidents");
    } finally {
      setLoading(false);
    }
  }, [getApiEndpoint, incidentId, user?.role]);

  // Initial data fetch
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Debounced search function
  const debouncedFilter = useMemo(
    () =>
      debounce((term, data) => {
        if (term) {
          const lowercasedFilter = term.toLowerCase();
          const filtered = data.filter((item) =>
            Object.keys(item).some((key) => {
              const value = item[key];
              return value !== null && value.toString().toLowerCase().includes(lowercasedFilter);
            })
          );
          setFilteredData(filtered);
        } else {
          setFilteredData(data);
        }
      }, 300),
    []
  );

  // Search effect with normalization
  useEffect(() => {
    const normalizeSearchTerm = (term) => {
      const mappings = {
        "under review": "under_review",
        reported: "reported",
        resolved: "resolved",
        "show cause": "show_cause",
        penalty: "penalty",
        advisory: "advisory",
        low: "low",
        medium: "medium",
        high: "high",
        critical: "critical",
      };
      const lowerTerm = term.toLowerCase().trim();
      if (!lowerTerm) return "";
      if (mappings[lowerTerm]) {
        return mappings[lowerTerm];
      }
      for (const [key, value] of Object.entries(mappings)) {
        if (key.startsWith(lowerTerm) || lowerTerm.includes(key)) {
          return value;
        }
      }
      return lowerTerm;
    };

    const normalizedTerm = normalizeSearchTerm(searchTerm);

    if (!normalizedTerm) {
      setFilteredData(data);
    } else {
      debouncedFilter(normalizedTerm, data);
    }

    return () => debouncedFilter.cancel();
  }, [searchTerm, data, debouncedFilter]);

  // Common handlers
  const handleSearch = useCallback((event) => {
    setSearchTerm(event.target.value);
  }, []);

  const handleAddIncidentClick = useCallback(() => {
    setEditIncidentData(null);
    setIsModalOpen(true);
  }, []);

  const handleChange = useCallback((e, incidentId) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [incidentId]: {
        ...prev[incidentId],
        [name]: value,
      },
    }));
  }, []);

  const handleIncidentDelete = useCallback(async () => {
    if (!incidentToDelete) return;

    try {
      const deleteIncidentUrl = `${process.env.REACT_APP_BACKEND_URL}/api/v1/incidents/${incidentToDelete.incidentId}`;
      const result = await apiRequest("DELETE", deleteIncidentUrl);

      if (result.status === 200 || result.status === 204) {
        toast.success("Incident Deleted Successfully");
        setData((prev) => prev.filter((incident) => incident.incidentId !== incidentToDelete.incidentId));
        fetchData();
      }
    } catch (error) {
      console.error("Error deleting incident:", error);
    } finally {
      setIsDeleteDialogOpen(false);
    }
  }, [incidentToDelete, fetchData]);

  const handleSubmitIncident = useCallback(
    async (incidentId, department) => {
      try {
        const isComplianceDepartment = department === "COMPLIANCE";
        const payload = {
          updatedFields: {
            updateType: "WORKFLOW_UPDATE",
            rejectedStatus:
              pageType === "latest" || pageType === "rejected" || pageType === "closure"
                ? formData[incidentId]?.approvalStatus === "approve"
                  ? false
                  : true
                : false,
          },
        };

        const result = await apiRequest(
          "PUT",
          `${process.env.REACT_APP_BACKEND_URL}/api/v1/incidents/${user.role}/${department}/${incidentId}`,
          payload
        );

        if (result.status === 200 || result.status === 204) {
          // Success message logic based on page type and approval status
          if (pageType === "created") {
            toast.success("Incident Sent to Compliance Checker Successfully");
          } else if (pageType === "latest") {
            const approvalStatus = formData[incidentId]?.approvalStatus;
            // Add specific success messages based on role and approval status
            if (isComplianceDepartment) {
              if (approvalStatus === "approve") {
                toast.success("Incident Sent to back to Compliance Maker for Closure Successfully");
              } else {
                toast.success("Incident Sent to back to Compliance Maker Successfully");
              }
            } else {
              if (approvalStatus === "approve") {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Incident Sent to Department Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Incident Sent to Department Checker Successfully");
                } else {
                  toast.success("Incident Sent to Compliance Maker Successfully");
                }
              } else {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Incident Sent to back to Compliance Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Incident Sent to back to Compliance Maker Successfully");
                } else {
                  toast.success("Incident Sent to back to Department Maker Successfully");
                }
              }
            }
          } else if (pageType === "rejected") {
            if (formData[incidentId]?.approvalStatus === "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Incident Sent to Compliance Checker Successfully");
              } else if (user.role === "DEPARTMENT_MAKER") {
                toast.success("Incident Sent to Department Checker Successfully");
              } else {
                toast.success("Incident Sent Successfully");
              }
            } else {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Incident Sent to back to Department Maker Successfully");
              } else if (user.role === "DEPARTMENT_MAKER") {
                toast.success("Incident Sent to back to Compliance Maker Successfully");
              } else {
                toast.success("Incident Sent Successfully");
              }
            }
          } else if (pageType === "closure") {
            if (formData[incidentId]?.approvalStatus === "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Incident Sent For Closure to Compliance Checker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Incident Closed Successfully");
              }
            } else if (formData[incidentId]?.approvalStatus !== "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Incident Sent Back to Department Maker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Incident Sent Back to Compliance Maker Successfully");
              }
            } else {
              toast.success("Incident Sent to back to Compliance Checker Successfully");
            }
          }
        }

        fetchData();
        dispatch(fetchNotifications());
      } catch (error) {
        toast.error("An error occurred while submitting the Incident.");
      }
    },
    [pageType, formData, user.role, fetchData, dispatch]
  );

  const handleSubmitRemark = useCallback(
    async (incidentId, remarkData) => {
      try {
        const result = await apiRequest(
          "POST",
          `${process.env.REACT_APP_BACKEND_URL}/api/v1/incidents/remarks/${incidentId}`,
          remarkData
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Incident Remark Added Successfully");
        }
        fetchData();
      } catch (error) {
        toast.error("An error occurred while submitting the Remark.");
      }
    },
    [fetchData]
  );

  const handleEditRemark = useCallback(
    async (incidentId, remarkContent) => {
      try {
        const result = await apiRequest(
          "PUT",
          `${process.env.REACT_APP_BACKEND_URL}/api/v1/incidents/remarks/${incidentId}`,
          { remarkContent }
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Incident Remark Updated Successfully");
        }
        fetchData();
      } catch (error) {
        toast.error("An error occurred while submitting the Remark.");
      }
    },
    [fetchData]
  );

  const handleSortBySeverity = useCallback(() => {
    const severityOrder = { CRITICAL: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };
    const sortedData = [...data].sort((a, b) => {
      return severityOrder[b.severity] - severityOrder[a.severity];
    });
    setData(sortedData);
  }, [data]);

  const handlePageChange = useCallback((event, newPage) => {
    setCurrentPage(newPage);
  }, []);

  const handleRowsPerPageChange = useCallback((event) => {
    const { numericValue, resetToFirstPage } = event;
    setRowsPerPage(numericValue);
    if (resetToFirstPage) {
      setCurrentPage(1);
    }
  }, []);

  // Utility functions
  const formatDateTime = useCallback((dateString) => {
    return new Date(dateString).toLocaleString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });
  }, []);

  const displayData = searchTerm ? filteredData : data;

  return {
    // State
    data,
    searchTerm,
    filteredData,
    isModalOpen,
    setIsModalOpen,
    editIncidentData,
    setEditIncidentData,
    incidentToDelete,
    setIncidentToDelete,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    descriptionDialogOpen,
    setDescriptionDialogOpen,
    currentDescription,
    setCurrentDescription,
    loading,
    formData,
    setFormData,
    viewAttachementDialogOpen,
    setViewAttachementDialogOpen,
    attachments,
    setAttachments,
    incidentId,
    setIncidentId,
    currentPage,
    rowsPerPage,
    totalRecords,
    totalPages,
    displayData,
    user,

    // Handlers
    handleSearch,
    handleAddIncidentClick,
    handleChange,
    handleIncidentDelete,
    handleSubmitIncident,
    handleSubmitRemark,
    handleEditRemark,
    handleSortBySeverity,
    handlePageChange,
    handleRowsPerPageChange,
    fetchData,
    formatDateTime,
  };
};

import React from "react";
import { IconButton, Tooltip, Stack, Box } from "@mui/material";
import {
  Visibility,
  ArrowCircleUp,
  ChatBubbleOutline,
  VisibilitySharp,
  Edit,
  Delete,
  VisibilityOff,
} from "@mui/icons-material";
import MDTypography from "components/MDTypography";
import { iconButtonStyle } from "layouts/resuableComponents/styles";
import { CustomDropdownChip } from "layouts/resuableComponents/customDropdownChipField";
import RemarksInputDialog from "layouts/resuableComponents/RemarksInputDialog";
import CustomIconButton from "layouts/resuableComponents/CustomIconButton";
import InputWithDialog from "layouts/resuableComponents/InputWithDialog ";

const statusOptions = [
  { label: "Approve", value: "approve" },
  { label: "Reject", value: "reject" },
];

export const formatIncidentTableData = (
  rawData,
  pageType,
  {
    currentPage,
    rowsPerPage,
    user,
    formData,
    setCurrentDescription,
    setDescriptionDialogOpen,
    setEditIncidentData,
    setIsModalOpen,
    setIncidentToDelete,
    setIsDeleteDialogOpen,
    setIncidentId,
    setAttachments,
    setViewAttachementDialogOpen,
    handleChange,
    handleSubmitRemark,
    handleEditRemark,
    handleSubmitIncident,
    formatDateTime,
  }
) => {
  const isComplianceRoles = user.role === "COMPLIANCE_MAKER" || user.role === "COMPLIANCE_CHECKER";
  const showDeleteAction = pageType === "created";
  const showApproval =
    pageType === "latest" ||
    pageType === "rejected" ||
    (pageType === "closure" && user.role !== "COMPLIANCE_MAKER");
  const showActions =
    pageType === "created" ||
    (pageType === "latest" && isComplianceRoles) ||
    pageType === "closure" ||
    pageType === "rejected";

  // Base columns that are common to all page types
  const baseColumns = [
    { Header: "S.No", accessor: "serialNumber", width: "5%", align: "center" },
    { Header: "Department", accessor: "department", width: "15%", align: "left" },
    { Header: "Description", accessor: "description", width: "15%", align: "left" },
    { Header: "Type", accessor: "type", width: "10%", align: "center" },
    { Header: "Status", accessor: "status", width: "10%", align: "center" },
    { Header: "Severity", accessor: "severity", width: "10%", align: "center" },
    { Header: "Assigned To", accessor: "assignedTo", width: "10%", align: "center" },
    { Header: "Due Date", accessor: "dueDate", width: "10%", align: "center" },
    { Header: "Reported Date", accessor: "reportedDate", width: "10%", align: "center" },
    { Header: "Created At", accessor: "createdAt", width: "10%", align: "center" },
    { Header: "Comments", accessor: "comments", width: "15%", align: "left" },
  ];

  // Conditional columns based on page type
  const conditionalColumns = [];

  if (showActions) {
    conditionalColumns.push({
      Header: "Actions",
      accessor: "actions",
      width: "15%",
      align: "center",
    });
  }

  conditionalColumns.push({
    Header: "Attachments",
    accessor: "attachments",
    width: "15%",
    align: "center",
  });

  if (showApproval) {
    conditionalColumns.push({
      Header: "Approval",
      accessor: "approval",
      width: "10%",
      align: "center",
    });
  }

  conditionalColumns.push({
    Header: "Remarks",
    accessor: "remarks",
    width: "15%",
    align: "center",
  });
  conditionalColumns.push({ Header: "Submit", accessor: "submit", width: "10%", align: "center" });

  const columns = [...baseColumns, ...conditionalColumns];

  const rows = rawData.map((item, index) => {
    const baseRow = {
      serialNumber: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {(currentPage - 1) * rowsPerPage + index + 1}
        </MDTypography>
      ),
      department: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {item.department.replace(/_/g, " ")}
        </MDTypography>
      ),
      description: (
        <Tooltip title="Preview Description">
          <IconButton
            sx={iconButtonStyle}
            onClick={() => {
              setCurrentDescription(item.description);
              setDescriptionDialogOpen(true);
            }}
          >
            <Visibility />
          </IconButton>
        </Tooltip>
      ),
      type: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {item.type.replace(/_/g, " ")}
        </MDTypography>
      ),
      status: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {item.status.replace(/_/g, " ")}
        </MDTypography>
      ),
      severity: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {item.severity.replace(/_/g, " ")}
        </MDTypography>
      ),
      assignedTo: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {item.assignedTo}
        </MDTypography>
      ),
      dueDate: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {formatDateTime(item.dueDate)}
        </MDTypography>
      ),
      reportedDate: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {formatDateTime(item.reportedDate)}
        </MDTypography>
      ),
      createdAt: (
        <MDTypography
          variant="button"
          sx={{ color: (theme) => theme.palette.custom.text2, fontSize: "0.7rem !important" }}
        >
          {formatDateTime(item.createdAt)}
        </MDTypography>
      ),
      comments: (
        <InputWithDialog
          value={item.comments}
          dialogTitle="Comments"
          dialogPlaceholder="Comments"
          cancelButtonLabel="Cancel"
          icon={VisibilityOff}
          name="name"
          type="text"
          callOnSave={false}
          isDisabled={true}
        />
      ),
      attachments: (
        <Tooltip title="View Attachments">
          <span>
            <IconButton
              sx={iconButtonStyle}
              onClick={() => {
                setIncidentId(item.incidentId);
                setAttachments(item.attachments);
                setViewAttachementDialogOpen(true);
              }}
            >
              <VisibilitySharp />
            </IconButton>
          </span>
        </Tooltip>
      ),
      remarks: (
        <Box sx={{ minWidth: "150px" }}>
          <RemarksInputDialog
            name="remarks"
            value={formData[item.incidentId]?.remarks || ""}
            onChange={(e) => handleChange(e, item.incidentId)}
            remarks={item.remarkHistory || []}
            currentUser={user}
            onSendRemark={(newRemark) => handleSubmitRemark(item.incidentId, newRemark)}
            onEditRemark={(incidentId, remarkText) => handleEditRemark(incidentId, remarkText)}
            icon={ChatBubbleOutline}
          />
        </Box>
      ),
    };

    // Add conditional columns based on page type
    if (showActions) {
      const actionButtons = [];

      // Edit button (always present when actions are shown)
      actionButtons.push(
        <Tooltip key="edit" title="Edit Incident Details">
          <IconButton
            sx={iconButtonStyle}
            onClick={() => {
              setEditIncidentData(item);
              setIsModalOpen(true);
            }}
          >
            <Edit />
          </IconButton>
        </Tooltip>
      );

      // Delete button (only for created page)
      if (showDeleteAction) {
        actionButtons.push(
          <Tooltip key="delete" title="Delete Incident">
            <IconButton
              sx={iconButtonStyle}
              onClick={() => {
                setIncidentToDelete(item);
                setIsDeleteDialogOpen(true);
              }}
            >
              <Delete />
            </IconButton>
          </Tooltip>
        );
      }

      baseRow.actions = (
        <Stack direction="row" spacing={1} justifyContent="center">
          {actionButtons}
        </Stack>
      );
    }

    // Add approval dropdown for applicable pages
    if (showApproval) {
      baseRow.approval = (
        <CustomDropdownChip
          options={statusOptions}
          value={formData[item.incidentId]?.approvalStatus || ""}
          onChange={(e) => handleChange(e, item.incidentId)}
          name="approvalStatus"
        />
      );
    }

    // Add submit button with conditional logic
    baseRow.submit = (
      <CustomIconButton
        icon={ArrowCircleUp}
        label="Submit"
        disabled={getSubmitDisabledState(item, formData, user, pageType)}
        onClick={() => handleSubmitIncident(item.incidentId, item.department)}
      />
    );

    return baseRow;
  });

  return { columns, rows };
};

// Helper function to determine if submit button should be disabled
const getSubmitDisabledState = (item, formData, user, pageType) => {
  const remarks = item.remarkHistory || [];
  const lastMyRemark = [...remarks].reverse().find((r) => r.role === user.role);
  const lastMyRemarkTime = lastMyRemark?.createdAt;
  const lastBackToMeTime = item.lastStepChangeTime;
  const addedNewRemark =
    lastMyRemarkTime && new Date(lastMyRemarkTime) > new Date(lastBackToMeTime);

  if (pageType === "latest" || pageType === "rejected" || (pageType === "closure" && user.role !== "COMPLIANCE_MAKER")) {
    const approvalStatus = formData[item.incidentId]?.approvalStatus;
    return !approvalStatus || !addedNewRemark;
  }

  return !addedNewRemark;
};


/**
=========================================================
* Athena Guard - v2.2.0
=========================================================

* Product Page: https://www.creative-tim.com/product/material-dashboard-react
* Copyright 2023 Grant Thornton (https://www.creative-tim.com)

Coded by www.creative-tim.com

 =========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/

import React from "react";

// @mui material components
import SearchIcon from "@mui/icons-material/Search";
import Box from "@mui/material/Box";
import InputAdornment from "@mui/material/InputAdornment";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import Skeleton from "@mui/material/Skeleton";

// Athena Guard components
import DataTable from "examples/Tables/DataTable";

// Athena Guard example components
import AddIcon from "@mui/icons-material/Add";
import CustomDeleteDialog from "layouts/resuableComponents/customDeleteDialog";
import IncidentFormDialog from "./incidentFormDialog";
import DescriptionDialog from "layouts/resuableComponents/customDescriptionViewDialog";
import { topBarStyle } from "layouts/resuableComponents/styles";
import { topBarSearchStyle } from "layouts/resuableComponents/styles";
import { animatedButtonStyle } from "layouts/resuableComponents/styles";
import EmptyStateBox from "layouts/resuableComponents/emptyStateBox";
import { AttachmentDrawer } from "layouts/resuableComponents/attachmentDrawer";
import { BsTable } from "react-icons/bs";
import PaginationFooter from "layouts/resuableComponents/PaginationFooter";

// Import custom hooks and utilities
import { useIncidentManagement } from "./hooks/useIncidentManagement";
import { formatIncidentTableData } from "./utils/formatIncidentTableData";

const CreateIncidentPage = () => {
  // Use the incident management hook
  const {
    // State
    searchTerm,
    isModalOpen,
    setIsModalOpen,
    editIncidentData,
    incidentToDelete,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    descriptionDialogOpen,
    setDescriptionDialogOpen,
    currentDescription,
    setCurrentDescription,
    loading,
    formData,
    viewAttachementDialogOpen,
    setViewAttachementDialogOpen,
    attachments,
    setAttachments,
    incidentId,
    setIncidentId,
    currentPage,
    rowsPerPage,
    totalRecords,
    totalPages,
    displayData,
    user,

    // Handlers
    handleSearch,
    handleAddIncidentClick,
    handleChange,
    handleIncidentDelete,
    handleSubmitIncident,
    handleSubmitRemark,
    handleEditRemark,
    handlePageChange,
    handleRowsPerPageChange,
    fetchData,
    formatDateTime,
    setEditIncidentData,
    setIncidentToDelete,
    setIsModalOpen
