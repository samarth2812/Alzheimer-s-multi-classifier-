export const stepBasedUpdateFilter = (
  currStep: number,
  rejectedStatus: boolean,
  role?: string,
  department?: string
): { newCurrStep: number; newPrevStep: number } => {
  const isComplianceFlow = department === "COMPLIANCE";

  // === APPROVAL FLOW ===
  if (!rejectedStatus) {
    // Compliance-only closure handling
    if (isComplianceFlow) {
      if (currStep === 0 && role === "COMPLIANCE_MAKER") {
        return { newCurrStep: 1, newPrevStep: 0 }; // CM → CC
      }
      if (currStep === 1 && role === "COMPLIANCE_CHECKER") {
        return { newCurrStep: 4, newPrevStep: 0 }; // CC → Closure for CM
      }
      if (currStep === 4 && role === "COMPLIANCE_MAKER") {
        return { newCurrStep: 4, newPrevStep: 1 }; // Closure CM → Closure CC
      }
      if (currStep === 4 && role === "COMPLIANCE_CHECKER") {
        return { newCurrStep: 4, newPrevStep: 4 }; // Final closure (mark as closed)
      }

      throw new Error("Invalid step-role combo in Compliance workflow");
    }

    // === Default approval flow ===
    if (currStep === 4) {
      if (role === "COMPLIANCE_MAKER") {
        return { newCurrStep: 4, newPrevStep: 1 };
      } else if (role === "COMPLIANCE_CHECKER") {
        return { newCurrStep: 4, newPrevStep: 4 };
      } else {
        throw new Error("Invalid role for closure step");
      }
    }

    return { newCurrStep: currStep + 1, newPrevStep: currStep };
  }

  // === REJECTION FLOW ===
  if (isComplianceFlow) {
    // Rejection in compliance flow always returns to COMPLIANCE_MAKER at currStep 0
    return { newCurrStep: 0, newPrevStep: currStep };
  }

  // === Default rejection flow ===
  switch (currStep) {
    case 0:
      return { newCurrStep: 2, newPrevStep: 0 }; // CM Rejects
    case 1:
      return { newCurrStep: 0, newPrevStep: 1 }; // CC Rejects
    case 2:
      return { newCurrStep: 0, newPrevStep: 2 }; // DM Rejects
    case 3:
      return { newCurrStep: 2, newPrevStep: 3 }; // DC Rejects
    case 4:
      return { newCurrStep: 3, newPrevStep: 4 }; // Rejection in closure
    default:
      throw new Error("Invalid step");
  }
};

export type StepRoles =
  | "COMPLIANCE_MAKER"
  | "COMPLIANCE_CHECKER"
  | "DEPARTMENT_MAKER"
  | "DEPARTMENT_CHECKER";

export const roleStepMap: Record<StepRoles, number> = {
  COMPLIANCE_MAKER: 0,
  COMPLIANCE_CHECKER: 1,
  DEPARTMENT_MAKER: 2,
  DEPARTMENT_CHECKER: 3,
};
