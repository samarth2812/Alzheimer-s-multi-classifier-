export const getIndentAuditTrail = async (
  user: User,
  indentId?: string,
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    if (
      user.role !== "COMPLIANCE_MAKER" &&
      user.role !== "COMPLIANCE_CHECKER"
    ) {
      throw new Error("You are not authorized to view audit trails.");
    }

    const where: any = {};
    if (indentId) where.indentId = indentId;

    const offset = (page - 1) * pageSize;

    const [auditEntries, total] = await Promise.all([
      prisma.indentAuditTrail.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: { timestamp: "desc" },
        select: {
          indentId: true,
          actionType: true,
          role: true,
          performedByName: true,
          performedByEmail: true,
          timestamp: true,
          modifications: true,
        },
      }),
      prisma.indentAuditTrail.count({ where }),
    ]);

    return {
      success: true,
      data: auditEntries,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
    };
  } catch (error) {
    console.error("Failed to fetch audit trail", error);
    throw new Error("Unable to fetch audit trail");
  }
};


export const getObligationAuditTrail = async (
  obligationId?: string,
  userRole?: string,
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    const whereFilter: any = {};

    // Search by obligation ID (exact match)
    if (obligationId && obligationId.trim()) {
      whereFilter.obligationId = obligationId.trim();
    }

    // Filter by user role
    if (userRole && userRole.trim()) {
      whereFilter.actionedByRole = userRole.trim();
    }

    const offset = (page - 1) * pageSize;

    const [auditEntries, total] = await Promise.all([
      prisma.obligationAudit.findMany({
        where: whereFilter,
        skip: offset,
        take: pageSize,
        orderBy: { createdAt: 'desc' }
      }),
      prisma.obligationAudit.count({ where: whereFilter })
    ]);

    // Enhance audit entries with formatted changes
    const enhancedEntries = auditEntries.map(entry => ({
      ...entry,
      changes: formatAuditChanges(entry.changes),
      auditTypeDisplay: formatAuditType(entry.auditType)
    }));

    return {
      success: true,
      data: enhancedEntries,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize)
      }
    };
  } catch (error: any) {
    throw ApiError.internal(`Error retrieving audit trail: ${error.message}`);
  }
};
