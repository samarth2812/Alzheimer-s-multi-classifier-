import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  InputAdornment,
  TextField,
} from "@mui/material";
import { useEffect, useState } from "react";
import { InputField } from "./inputField";
import { dialogButtonStyle, dialogCancelButtonStyle, dialogStyle, textfieldStyle } from "./styles";
import { Visibility } from "@mui/icons-material";

const InputWithDialog = ({
  value,
  onChange,
  placeholder,
  label,
  error,
  icon: Icon,
  type,
  name,
  dialogTitle = "Edit Text",
  dialogPlaceholder = "Enter text...",
  saveButtonLabel = "Save",
  cancelButtonLabel = "Cancel",
  isDisabled = false,
  callOnSave = true,
}) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  const [tempValue, setTempValue] = useState("");

  useEffect(() => {
    if (dialogOpen) setTempValue(value);
  }, [dialogOpen, value]);

  const handleDialogSave = () => {
    onChange(tempValue);
    setDialogOpen(false);
  };

  return (
    <>
      <InputField
        placeholder={placeholder}
        value={value}
        onChange={isDisabled ? () => {} : (e) => onChange(e.target.value)}
        error={error}
        name={name}
        type={type}
        disabled={false}
        endAdornment={
          <InputAdornment position="end">
            <Icon
              sx={{
                color: (theme) => theme.palette.custom.two,
                fontSize: "1.2rem",
                cursor: "pointer",
              }}
              onClick={() => setDialogOpen(true)}
            />
          </InputAdornment>
        }
      />
      <Dialog
        open={dialogOpen}
        onClose={() => setDialogOpen(false)}
        fullWidth
        maxWidth="md"
        sx={dialogStyle}
      >
        <DialogTitle
          sx={{ color: (theme) => theme.palette.custom.two, fontSize: "0.9rem !important" }}
        >
          {dialogTitle}
        </DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            multiline
            disabled={isDisabled}
            minRows={10}
            maxRows={20}
            value={tempValue}
            onChange={(e) => setTempValue(e.target.value)}
            placeholder={dialogPlaceholder}
            sx={{ ...textfieldStyle, opacity: isDisabled ? "0.5" : "1" }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)} size="small" sx={dialogCancelButtonStyle}>
            {cancelButtonLabel}
          </Button>
          {callOnSave && (
            <Button onClick={handleDialogSave} size="small" sx={dialogButtonStyle}>
              {saveButtonLabel}
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </>
  );
};

export default InputWithDialog;
