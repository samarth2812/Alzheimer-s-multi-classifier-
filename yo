export const deleteAttachmentById = async (attachmentId: string) => {
  try {
    if (!attachmentId) {
    }
    const existingIndent = await prisma.attachment.findUnique({
      where: { id: attachmentId },
    });

    if (!existingIndent) {
      throw new Error("attachment not found");
    }

    return await prisma.attachment.update({
      where: { id: attachmentId },
      data: { isDeleted: true },
    });
  } catch (error) {
    console.error("Error deleting attachment:", error);
    throw new Error("Failed to delete attachment");
  }
};

export const getIndentAuditTrail = async (
  user: User,
  indentId?: string,
  page: number = 1,
  pageSize: number = 10
) => {
  try {
    const where: any = {};

    // Filter by specific indent if provided
    if (indentId) {
      where.indentId = indentId;
    }

    // Role-based filtering
    if (
      user.role === "DEPARTMENT_MAKER" ||
      user.role === "DEPARTMENT_CHECKER"
    ) {
      where.indent = {
        department: user.department,
      };
    }

    const offset = (page - 1) * pageSize;

    const [auditEntries, total] = await Promise.all([
      prisma.indentAuditTrail.findMany({
        where,
        skip: offset,
        take: pageSize,
        orderBy: { timestamp: "desc" },
        include: {
          indent: {
            select: {
              department: true,
              description: true,
              indentId: true,
            },
          },
        },
      }),

      prisma.indentAuditTrail.count({ where }),
    ]);

    return {
      success: true,
      data: auditEntries,
      pagination: {
        total,
        page,
        pageSize,
        totalPages: Math.ceil(total / pageSize),
      },
    };
  } catch (error) {
    console.error("Failed to fetch audit trail", error);
    throw new Error("Unable to fetch audit trail");
  }
};
