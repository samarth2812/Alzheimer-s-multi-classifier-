
  return (
    <>
      {selectedComm ? (
        <Box sx={{ px: 2, py: 2 }}>
          <Box sx={{ mb: 0}}>
            <Button
              variant="text"
              startIcon={<ArrowBackIcon />}
              onClick={() => setSelectedComm(null)}
            >
              Back
            </Button>
          </Box>
          <MailTrailAccordion
            mailTrail={[...(selectedComm.replies || []), selectedComm]}
            onReply={(comm) => {
              setEditCommData({
                refNo: comm.refNo,
                category: comm.category,
                sentTo: [comm.sentBy],
                subject: `Re: ${comm.subject}`,
                cc: comm.cc,
                category: comm.category,
                commType: comm.commType,
                responseDueBy: comm.responseDueBy,
                parentCommId: comm.commId,
                priorityLevel: comm.priorityLevel,
              });
              setIsModalOpen(true);
            }}
          />
        </Box>
      ) : (
        <Box sx={{ width: "100%", height: "100%", display: "flex", flexDirection: "column" }}>
          {/* Top Bar */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mb: 0,
              mx: 3,
              flexWrap: "wrap",
            }}
          >
            {/* Left: Tabs */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {["Inbox", "Sent Items"].map((label) => {
                const value = label === "Inbox" ? "inbox" : "sent";
                const isActive = tab === value;
                return (
                  <Button
                    key={value}
                    onClick={() => setTab(value)}
                    sx={{
                      fontSize: "0.7rem",
                      fontWeight: isActive ? 600 : 400,
                      color: (theme) =>
                        isActive ? theme.palette.custom.two : theme.palette.custom.text2,
                      position: "relative",
                      borderRadius: 0,
                      textTransform: "none",
                      "&::after": {
                        content: '""',
                        position: "absolute",
                        bottom: -1,
                        left: 0,
                        width: "100%",
                        height: "2px",
                        backgroundColor: (theme) => theme.palette.custom.two,
                        transform: isActive ? "scaleX(1)" : "scaleX(0)",
                        transformOrigin: "left",
                        transition: "transform 0.3s ease-out",
                      },
                      "&:hover::after": {
                        transform: "scaleX(1)",
                      },
                    }}
                  >
                    {label}
                  </Button>
                );
              })}
            </Box>

            {/* Right: Search and Add */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 2, mt: { xs: 1, sm: 0 } }}>
              <TextField
                fullWidth
                placeholder="Search Communication..."
                variant="outlined"
                sx={{ minWidth: 250 , minHeight:20}}
                onChange={handleSearch}
                value={searchTerm}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search fontSize="medium" sx={iconButtonStyle} />
                    </InputAdornment>
                  ),
                }}
              />
              <CustomIconButton
              size = "medium"
              label="Add Communication"
              onClick={handleAddCommClick}
              />
            </Box>
          </Box>

          {/* Content */}
          <Box sx={{ flexGrow: 1, px: 3, py: 2 }}>
            {loading ? (
              <Box>
                {[...Array(5)].map((_, idx) => (
                  <Skeleton key={idx} variant="rectangular" height={40} sx={{ mb: 2 }} />
                ))}
              </Box>
            ) : filteredData.length > 0 ? (
              <CommunicationList
                communications={filteredData}
                selectedId={selectedComm?.commId}
                onSelect={(comm) => setSelectedComm(comm)}
              />
            ) : (
              <EmptyStateBox
                icon={BsTable}
                title="No Communications Found"
                description="Try changing your filters or adding a new communication."
              />
            )}
          </Box>
        </Box>
      )}

      <CommunicationFormDialog
        open={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialData={editCommData}
        user={user}
        onSubmit={() => fetchData(tab)}
      />
    </>
  );
};
