import React from "react";
import { Box, TextField, Button, Typography, InputAdornment, Skeleton } from "@mui/material";
import { BsTable } from "react-icons/bs";

// Components
import IndentFormDialog from "./indentFormDialog";


// Styles
import { topBarStyle } from "layouts/resuableComponents/styles";
import { topBarSearchStyle } from "layouts/resuableComponents/styles";
import { animatedButtonStyle } from "layouts/resuableComponents/styles";
import { iconButtonStyle } from "layouts/resuableComponents/styles";
import { AttachmentDrawer } from "layouts/resuableComponents/attachmentDrawer";
import DescriptionDialog from "layouts/resuableComponents/customDescriptionViewDialog";
import CustomDeleteDialog from "layouts/resuableComponents/customDeleteDialog";
import { formatTableData } from "./tableFormatter";
import { useIndentManagement } from "./useIndentManagement";
import { Add, FilterAlt, Search } from "@mui/icons-material";
import DataTable from "examples/Tables/DataTable";
import EmptyStateBox from "layouts/resuableComponents/emptyStateBox";
import PaginationFooter from "layouts/resuableComponents/PaginationFooter";

const CreateIndentPage = () => {
  const {
    // State
    data,
    searchTerm,
    isModalOpen,
    setIsModalOpen,
    editIndentData,
    setEditIndentData,
    indentToDelete,
    setIndentToDelete,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    descriptionDialogOpen,
    setDescriptionDialogOpen,
    currentDescription,
    setCurrentDescription,
    loading,
    formData,
    viewAttachementDialogOpen,
    setViewAttachementDialogOpen,
    attachments,
    setAttachments,
    indentId,
    setIndentId,
    currentPage,
    rowsPerPage,
    totalRecords,
    totalPages,
    displayData,
    user,

    // Handlers
    handleSearch,
    handleAddIndentClick,
    handleChange,
    handleIndentDelete,
    handleSubmitIndent,
    handleSubmitRemark,
    handleEditRemark,
    handleSortByPriority,
    handlePageChange,
    handleRowsPerPageChange,
    fetchData,
    formatDateTime,
  } = useIndentManagement("created");

  const tableData = formatTableData(displayData, "created", {
    currentPage,
    rowsPerPage,
    user,
    formData,
    setCurrentDescription,
    setDescriptionDialogOpen,
    setEditIndentData,
    setIsModalOpen,
    setIndentToDelete,
    setIsDeleteDialogOpen,
    setIndentId,
    setAttachments,
    setViewAttachementDialogOpen,
    handleChange,
    handleSubmitRemark,
    handleEditRemark,
    handleSubmitIndent,
    formatDateTime,
  });

  return (
    <>
      <Box
        sx={{
          width: "100%",
          height: "100%",
          display: "flex",
          flexDirection: "column",
          gap: "8px",
          position: "relative",
        }}
      >
        <Box sx={{ ...topBarStyle, mb: 1, gap: 2 }}>
          <TextField
            fullWidth
            placeholder="Search Indent Records..."
            variant="outlined"
            sx={topBarSearchStyle}
            value={searchTerm}
            onChange={handleSearch}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search fontSize="medium" sx={iconButtonStyle} />
                </InputAdornment>
              ),
            }}
          />
          {tableData && tableData?.rows && tableData?.rows.length > 2 && (
            <>
              <Button
                size="small"
                color="info"
                sx={animatedButtonStyle}
                startIcon={<FilterAlt />}
                onClick={handleSortByPriority}
              >
                Priority
              </Button>
              <Typography
                variant="body2"
                sx={{
                  color: (theme) => theme.palette.custom.text1,
                  opacity: 0.5,
                }}
              >
                |
              </Typography>
            </>
          )}
          <Button
            size="small"
            startIcon={<Add />}
            onClick={handleAddIndentClick}
            color="info"
            sx={animatedButtonStyle}
          >
            Add Indent
          </Button>
        </Box>

        {loading ? (
          <Box>
            {[...Array(5)].map((_, index) => (
              <Skeleton
                key={index}
                variant="rectangular"
                animation="wave"
                height={40}
                sx={{
                  mb: 2,
                  borderRadius: 2,
                  backgroundColor: (theme) => theme.palette.custom.background1,
                }}
              />
            ))}
          </Box>
        ) : tableData && tableData?.rows && tableData?.rows.length > 0 ? (
          <Box pb={1} sx={{ overflowY: "auto", display: "flex", maxWidth: "100%" }}>
            <DataTable
              table={tableData}
              isSorted={false}
              entriesPerPage={true}
              showTotalEntries={true}
              noEndBorder
            />
          </Box>
        ) : (
          <EmptyStateBox
            icon={BsTable}
            title="Currently there are no created Indents"
            description="Start a new indent by tapping the 'Add Indent' button "
          />
        )}

        {tableData && tableData?.rows && tableData?.rows.length > 0 && (
          <PaginationFooter
            currentPage={currentPage}
            rowsPerPage={rowsPerPage}
            totalPages={totalPages}
            totalRecords={totalRecords}
            onPageChange={handlePageChange}
            onRowsPerPageChange={handleRowsPerPageChange}
            loading={loading}
          />
        )}
      </Box>

      <IndentFormDialog
        open={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialData={editIndentData}
        onSubmit={fetchData}
      />

      <CustomDeleteDialog
        open={isDeleteDialogOpen}
        onClose={() => setIsDeleteDialogOpen(false)}
        onConfirm={handleIndentDelete}
        type="Indent"
        field={indentToDelete ? indentToDelete.department : ""}
      />
      <DescriptionDialog
        open={descriptionDialogOpen}
        onClose={() => setDescriptionDialogOpen(false)}
        description={currentDescription}
      />
      <AttachmentDrawer
        moduleId={indentId}
        module={"INDENT"}
        uploadedBy={user.email}
        uploadedByRole={user.role}
        attachments={attachments}
        open={viewAttachementDialogOpen}
        onClose={() => setViewAttachementDialogOpen(false)}
        onUploadComplete={fetchData}
        user={user}
      />
    </>
  );
};

export default CreateIndentPage;
