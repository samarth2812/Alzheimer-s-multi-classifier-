import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { fetchNotificationsFromAPI } from "../../services/fetchNotifications";

// Thunk to fetch and update notifications
export const fetchNotifications = createAsyncThunk(
  "notifications/fetch",
  async (_, thunkAPI) => {
    try {
      const notifications = await fetchNotificationsFromAPI();
      thunkAPI.dispatch(setNotifications(notifications));
      return notifications;
    } catch (error) {
      console.error("Failed to fetch notifications:", error);
      return thunkAPI.rejectWithValue(error);
    }
  }
);

const initialState = {
  notifications: [],
  unreadCount: 0,
};

const notificationSlice = createSlice({
  name: "notifications",
  initialState,
  reducers: {
    setNotifications: (state, action) => {
      state.notifications = action.payload;
      state.unreadCount = action.payload.filter(
        (notification) => notification.unread
      ).length;
    },
  },
});

export const { setNotifications } = notificationSlice.actions;

// Selectors
export const selectNotifications = (state) => state.notifications.notifications;
export const selectUnreadCount = (state) => state.notifications.unreadCount;

export default notificationSlice.reducer;
const dispatch = useDispatch();
