const twoDayReminderJob: CronJobWrapper = {
  running: false,
  job: cron.schedule(
    "0 9 * * *",
    async () => {
      try {
        console.log("Starting 2-day reminder job...");
        const reminderResult = await sendRegulatoryTimelineReminders(2);
        console.log("2-day reminder job completed:", reminderResult);
      } catch (error: any) {
        console.error("2-day reminder job failed:", error);
      }
    },
    {
      scheduled: false,
      timezone: "Asia/Kolkata",
    } as any
  ),
};

const oneDayReminderJob: CronJobWrapper = {
  running: false,
  job: cron.schedule(
    "0 9 * * *",
    async () => {
      try {
        console.log(" Starting 1-day reminder job...");
        const reminderResult = await sendRegulatoryTimelineReminders(1);
        console.log("1-day reminder job completed:", reminderResult);
      } catch (error: any) {
        console.error("1-day reminder job failed:", error);
      }
    },
    {
      scheduled: false,
      timezone: "Asia/Kolkata",
    } as any
  ),
};

const sameDayReminderJob: CronJobWrapper = {
  running: false,
  job: cron.schedule(
    "0 9 * * *",
    async () => {
      try {
        console.log("Starting SAME-DAY reminder job...");
        const reminderResult = await sendRegulatoryTimelineReminders(0);
        console.log("Same-day reminder job completed:", reminderResult);

        if (reminderResult.totalObligations > 0) {
          console.warn(
            ` CRITICAL: ${reminderResult.totalObligations} obligations are due TODAY!`
          );
        }
      } catch (error: any) {
        console.error("Same-day reminder job failed:", error);
      }
    },
    {
      scheduled: false,
      timezone: "Asia/Kolkata",
    } as any
  ),
};

export const triggerReminderJob = async (
  type: "2_days" | "1_day" | "same_day"
): Promise<any> => {
  try {
    console.log(`Manually triggering ${type} reminder job...`);

    let daysBefore: number;
    switch (type) {
      case "2_days":
        daysBefore = 2;
        break;
      case "1_day":
        daysBefore = 1;
        break;
      case "same_day":
        daysBefore = 0;
        break;
      default:
        throw new Error("Invalid reminder type");
    }

    const [
      obligationReminders,
      indentReminders,
      incidentReminders,
      observationReminders,
    ] = await Promise.all([
      sendRegulatoryTimelineReminders(daysBefore),
      sendIndentsDueDateReminders(daysBefore),
      sendIncidentsDueDateReminders(daysBefore),
      sendObservationDueDateReminders(daysBefore),
    ]);

    const result = {
      obligationReminders,
      indentReminders,
      incidentReminders,
      observationReminders,
    };

    console.log(`Manual ${type} reminder job completed:`, result);
    return result;
  } catch (error: any) {
    console.error(`Manual ${type} reminder job failed:`, error);
    throw error;
  }
};
