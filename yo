import { apiRequest } from "../axios/apiRequest";

export const fetchNotificationsFromAPI = async () => {
  try {
    const baseUrl = process.env.REACT_APP_BACKEND_URL;

    // Fire all notification API requests in parallel
    const [obligationRes, indentRes, incidentRes, iseRes] = await Promise.all([
      apiRequest("GET", `${baseUrl}/api/v1/obligations/notifications`),
      apiRequest("GET", `${baseUrl}/api/v1/indents/notifications`),
      apiRequest("GET", `${baseUrl}/api/v1/incident-reporting/notifications`),
      apiRequest("GET", `${baseUrl}/api/v1/ise-observation/notifications`),
    ]);

    const notifications = [];

    const responses = [
      { key: "obligation", label: "Obligation", icon: "assignment", res: obligationRes },
      { key: "indent", label: "Indent", icon: "description", res: indentRes },
      { key: "incident", label: "Incident", icon: "report_problem", res: incidentRes },
      { key: "ise", label: "ISE Observation", icon: "visibility", res: iseRes },
    ];

    const types = [
      { key: "Latest", suffix: "Latest", label: "Latest", color: "#4CAF50" },
      { key: "Rejected", suffix: "Rejected", label: "Rejected", color: "#FF5722" },
      { key: "Closure", suffix: "Closure", label: "Closure", color: "#2196F3" },
    ];

    for (const { key, label, icon, res } of responses) {
      if (res.status === 200 && res.data && res.data.data) {
        const data = res.data.data;

        for (const type of types) {
          const dataKey = `${key}${type.suffix}`; // e.g. indentLatest

          const count = data[dataKey];
          if (count > 0) {
            notifications.push({
              id: `${key}-${type.label.toLowerCase()}`,
              icon,
              title: `${count} ${type.label} ${label}${count > 1 ? "s" : ""}`,
              description: `Click here to view ${type.label.toLowerCase()} ${label.toLowerCase()}s`,
              timestamp: "Just now",
              unread: true,
              iconColor: type.color,
              type: `${key}-${type.label.toLowerCase()}`, // e.g. indent-latest
            });
          }
        }
      }
    }

    return notifications;
  } catch (error) {
    console.error("Error fetching notifications:", error);
    return [];
  }
};
