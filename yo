export const triggerManualReminderEmails = async (
  emailType: EmailType,
  reminderFromUserData: User,
  emailData:
    | ObligationEmailData
    | IndentEmailData
    | IncidentEmailData
    | ObservationEmailData,
  assignees: Assignee[]
) => {
  try {
    const frontendUrl = process.env.FRONTEND_URL || "https://your-app.com";

    const moduleTypeMap: Record<EmailType, Module> = {
      OBLIGATION: Module.OBLIGATION,
      INDENT: Module.INDENT,
      INCIDENT: Module.INCIDENT,
      OBSERVATION: Module.ISE_OBSERVATION,
    };

    const templateType = "manualReminder";

    for (const assignee of assignees) {
      try {
        const commonFields = {
          recipientName: assignee.name,
          action: "Please review and take necessary action.",
          department: emailData.department,
          frontendUrl,
          senderName: reminderFromUserData.name,
          senderEmail: reminderFromUserData.email,
          senderRole: reminderFromUserData.role.replace(/_/g, " "),
        };

        const mergedEmailData = {
          ...commonFields,
          ...(emailType === "OBLIGATION"
            ? {
                obligationId: (emailData as ObligationEmailData).obligationId,
                obligationTitle: (emailData as ObligationEmailData)
                  .obligationTitle,
              }
            : emailType === "INDENT"
            ? {
                category: (emailData as IndentEmailData).category.replace(
                  /_/g,
                  " "
                ),
              }
            : emailType === "INCIDENT"
            ? {
                type: (emailData as IncidentEmailData).type.replace(/_/g, " "),
              }
            : {
                theme: (emailData as ObservationEmailData).theme.replace(
                  /_/g,
                  " "
                ),
              }),
        };

        const subject = generateEmailSubject(emailType);

        const emailBody = await renderModuleEmailTemplate(
          emailType.toLowerCase(),
          templateType,
          mergedEmailData
        );

        await addEmailToQueue({
          to: assignee.email,
          subject,
          body: emailBody,
          moduleType: moduleTypeMap[emailType],
        });

        console.log(
          `‚úÖ Email queued for ${assignee.name} (${assignee.email}) - ${emailType}`
        );
      } catch (innerError) {
        console.error(
          `‚ùå Failed to queue email for ${assignee.name} (${assignee.email}) - ${emailType}`,
          innerError
        );
      }
    }

    try {
      await processPendingEmails();
      console.log(`üì¨ Immediate email processing completed for ${emailType}`);
    } catch (processError) {
      console.error(`‚ö†Ô∏è Email processing failed for ${emailType}`, processError);
    }
  } catch (outerError) {
    console.error(
      `üö® Unexpected error in triggerManualReminderEmails for ${emailType}`,
      outerError
    );
    throw outerError; // rethrow if you want caller to handle it
  }
};
