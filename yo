import { fetchNotifications } from "features/notificationSlice";
import debounce from "lodash.debounce";
import { useCallback, useEffect, useMemo, useState } from "react";
import toast from "react-hot-toast";
import { useDispatch, useSelector } from "react-redux";
import { apiRequest } from "../../axios/apiRequest";

export const useIndentManagement = (pageType) => {
  if (!pageType) {
    return;
  }
  // Common state
  const [data, setData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editIndentData, setEditIndentData] = useState(null);
  const [indentToDelete, setIndentToDelete] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [descriptionDialogOpen, setDescriptionDialogOpen] = useState(false);
  const [currentDescription, setCurrentDescription] = useState("");
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({});
  const [viewAttachementDialogOpen, setViewAttachementDialogOpen] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const [indentId, setIndentId] = useState("");

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [totalRecords, setTotalRecords] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  // Button state management
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submittingIndentId, setSubmittingIndentId] = useState(null);

  const user = useSelector((state) => state.user.user);
  const dispatch = useDispatch();

  // Validate role and pageType combination
  const isValidRolePageCombination = useCallback((role, pageType) => {
    const validCombinations = {
      COMPLIANCE_MAKER: ["created", "rejected", "closure"],
      COMPLIANCE_CHECKER: ["latest", "closure"],
      DEPARTMENT_MAKER: ["latest", "rejected"],
      DEPARTMENT_CHECKER: ["latest"],
    };

    return validCombinations[role]?.includes(pageType) || false;
  }, []);

  // API endpoint configuration based on page type
  const getApiEndpoint = useCallback(
    (searchQuery = "", page = currentPage, limit = rowsPerPage) => {
      const baseUrl = window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL;
      const role = user?.role;
      const department = user?.department;
      const pagination = `page=${page}&limit=${limit}`;
      const searchParam = searchQuery;

      // Validate the combination before making API call
      if (!isValidRolePageCombination(role, pageType)) {
        console.error(`Invalid combination: ${role} cannot access ${pageType} endpoint`);
        return null;
      }

      switch (pageType) {
        case "created":
          return `${baseUrl}/api/v1/indents/${role}/created/${searchParam}?${pagination}`;
        case "latest":
          return role === "COMPLIANCE_CHECKER"
            ? `${baseUrl}/api/v1/indents/${role}/latest/${searchParam}?${pagination}`
            : searchParam
            ? `${baseUrl}/api/v1/indents/${role}/latest/${searchParam}/${department}?${pagination}`
            : `${baseUrl}/api/v1/indents/${role}/latest/${department}?${pagination}`;
        case "closure":
          return `${baseUrl}/api/v1/indents/${role}/closure/${searchParam}?${pagination}`;
        case "rejected":
          return role === "COMPLIANCE_MAKER"
            ? `${baseUrl}/api/v1/indents/${role}/rejected/${searchParam}?${pagination}`
            : searchParam
            ? `${baseUrl}/api/v1/indents/${role}/rejected/${searchParam}/${department}/?${pagination}`
            : `${baseUrl}/api/v1/indents/${role}/rejected/${department}/?${pagination}`;
        default:
          return null;
      }
    },
    [pageType, user?.role, user?.department, isValidRolePageCombination]
  );

  // Main fetch function that accepts all parameters
  const fetchDataWithParams = useCallback(
    async (searchQuery = "", page = 1, limit = 5) => {
      if (!user?.role) return;

      const endpoint = getApiEndpoint(searchQuery, page, limit);

      // Don't make API call if endpoint is invalid
      if (!endpoint) {
        console.error(
          `Cannot fetch data: Invalid role-pageType combination (${user?.role} - ${pageType})`
        );
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        const response = await apiRequest("GET", endpoint);

        setData(response.data.data);
        setTotalRecords(response.data.pagination.total);
        setTotalPages(response.data.pagination.totalPages);

        // Update attachments if indentId exists
        if (indentId) {
          const updatedIndent = response.data.data.find((indent) => indent.indentId === indentId);
          if (updatedIndent) {
            setAttachments(updatedIndent.attachments || []);
          }
        }
      } catch (error) {
        console.error("API Error:", error);
        toast.error("Failed to fetch Indent");
      } finally {
        setLoading(false);
      }
    },
    [getApiEndpoint, indentId, user?.role, pageType]
  );

  // Fetch data function using current state
  const fetchData = useCallback(
    async (searchQuery = "") => {
      await fetchDataWithParams(searchQuery, currentPage, rowsPerPage);
    },
    [fetchDataWithParams, currentPage, rowsPerPage]
  );

  // Separate function for fetching with search
  const fetchDataWithSearch = useCallback(
    async (searchQuery = "") => {
      await fetchDataWithParams(searchQuery, currentPage, rowsPerPage);
    },
    [fetchDataWithParams, currentPage, rowsPerPage]
  );

  // Debounced search function for backend API calls
  const debouncedSearch = useMemo(
    () =>
      debounce(async (searchQuery) => {
        setCurrentPage(1);
        await fetchDataWithParams(searchQuery, 1, rowsPerPage);
      }, 500),
    [fetchDataWithParams, rowsPerPage]
  );

  // Effect for initial load only
  useEffect(() => {
    if (!user?.role) return;

    const trimmedSearchTerm = searchTerm.trim();
    fetchDataWithParams(trimmedSearchTerm, currentPage, rowsPerPage);
  }, [user?.role]); // Only depend on user role for initial load

  // Effect for search term changes only
  useEffect(() => {
    if (!user?.role) return;

    const trimmedSearchTerm = searchTerm.trim();

    if (trimmedSearchTerm) {
      debouncedSearch(trimmedSearchTerm);
    } else {
      debouncedSearch.cancel();
      setCurrentPage(1);
      fetchDataWithParams("", 1, rowsPerPage);
    }

    return () => debouncedSearch.cancel();
  }, [searchTerm, user?.role, rowsPerPage, fetchDataWithParams]);

  // Modified handleSubmitRemark - update local state instead of refetching
  const handleSubmitRemark = useCallback(
    async (indentId, remarkData) => {
      try {
        const result = await apiRequest(
          "POST",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/indents/remarks/${indentId}`,
          remarkData
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Indent Remark Added Successfully");
          
          // Update local state instead of refetching
          setData(prevData => 
            prevData.map(item => 
              item.indentId === indentId 
                ? { 
                    ...item, 
                    remarkHistory: [...(item.remarkHistory || []), {
                      id: result.data?.id || Date.now(), // Use server ID or timestamp as fallback
                      remarkContent: remarkData.remarkContent,
                      createdAt: new Date().toISOString(),
                      updatedAt: new Date().toISOString(),
                      role: user.role,
                      createdBy: user.name || user.email,
                      ...remarkData
                    }]
                  }
                : item
            )
          );
        }
      } catch (error) {
        console.error("Error submitting remark:", error);
        toast.error("An error occurred while submitting the Remark.");
      }
    },
    [user.role, user.name, user.email]
  );

  // Modified handleEditRemark - update local state instead of refetching
  const handleEditRemark = useCallback(
    async (remarkId, remarkContent) => {
      try {
        const result = await apiRequest(
          "PUT",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/indents/remarks/${remarkId}`,
          { remarkContent }
        );

        if (result.status === 201 || result.status === 204) {
          toast.success("Indent Remark Updated Successfully");
          
          // Update local state instead of refetching
          setData(prevData => 
            prevData.map(item => ({
              ...item,
              remarkHistory: (item.remarkHistory || []).map(remark =>
                remark.id === remarkId 
                  ? { ...remark, remarkContent, updatedAt: new Date().toISOString() }
                  : remark
              )
            }))
          );
        }
      } catch (error) {
        console.error("Error editing remark:", error);
        toast.error("An error occurred while updating the Remark.");
      }
    },
    []
  );

  // Rest of the handlers remain the same...
  const handleSearch = useCallback((event) => {
    setSearchTerm(event.target.value);
  }, []);

  const handleAddIndentClick = useCallback(() => {
    setEditIndentData(null);
    setIsModalOpen(true);
  }, []);

  const handleChange = useCallback((e, indentId) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [indentId]: {
        ...prev[indentId],
        [name]: value,
      },
    }));
  }, []);

  const handleIndentDelete = useCallback(async () => {
    if (!indentToDelete) return;

    try {
      const deleteIndentUrl = `${
        window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
      }/api/v1/indents/${indentToDelete.indentId}`;
      const result = await apiRequest("DELETE", deleteIndentUrl);

      if (result.status === 200 || result.status === 204) {
        toast.success("Indent Deleted Successfully");
        // Remove the deleted indent from local state
        setData(prevData => prevData.filter(item => item.indentId !== indentToDelete.indentId));
        
        // Update total records count
        setTotalRecords(prev => prev - 1);
      }
    } catch (error) {
      console.error("Error deleting indent:", error);
      toast.error("An error occurred while deleting the Indent.");
    } finally {
      setIsDeleteDialogOpen(false);
      setIndentToDelete(null);
    }
  }, [indentToDelete]);

  const handleSubmitIndent = useCallback(
    async (indentId, department) => {
      // Prevent multiple submissions
      if (isSubmitting || submittingIndentId === indentId) {
        console.log("Already submitting, ignoring click");
        return;
      }

      // Validate required data
      if (!indentId || !department || !user?.role) {
        toast.error("Missing required data for submission");
        return;
      }

      setIsSubmitting(true);
      setSubmittingIndentId(indentId);

      try {
        const isComplianceDepartment = department === "COMPLIANCE";
        const payload = {
          updatedFields: {
            type: "WORKFLOW_UPDATE",
            rejectedStatus:
              (pageType === "latest" || pageType === "rejected" || pageType === "closure") &&
              formData[indentId]?.approvalStatus === "reject"
                ? true
                : false,
          },
        };

        console.log("Submitting indent:", {
          indentId,
          department,
          userRole: user.role,
          pageType,
          payload,
        });

        const result = await apiRequest(
          "PUT",
          `${
            window._env_?.REACT_APP_BACKEND_URL || process.env.REACT_APP_BACKEND_URL
          }/api/v1/indents/${user.role}/${department}/${indentId}`,
          payload
        );

        if (result.status === 200 || result.status === 204) {
          // Success message logic based on page type and approval status
          if (pageType === "created") {
            toast.success("Indent Sent to Compliance Checker Successfully");
          } else if (pageType === "latest") {
            const approvalStatus = formData[indentId]?.approvalStatus;
            // Add specific success messages based on role and approval status
            if (isComplianceDepartment) {
              if (approvalStatus === "approve") {
                toast.success("Indent Sent to Compliance Maker for Closure Successfully");
              } else {
                toast.success("Indent Sent to back to Compliance Maker Successfully");
              }
            } else {
              if (approvalStatus === "approve") {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Indent Sent to Department Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Indent Sent to Department Checker Successfully");
                } else {
                  toast.success("Indent Sent to Compliance Maker Successfully");
                }
              } else {
                if (user.role === "COMPLIANCE_CHECKER") {
                  toast.success("Indent Sent to back to Compliance Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Indent Sent to back to Compliance Maker Successfully");
                } else {
                  toast.success("Indent Sent to back to Department Maker Successfully");
                }
              }
            }
          } else if (pageType === "rejected") {
            if (isComplianceDepartment) {
              toast.success("Indent Sent to Compliance Checker Successfully");
            } else {
              if (formData[indentId]?.approvalStatus === "approve") {
                if (user.role === "COMPLIANCE_MAKER") {
                  toast.success("Indent Sent to Compliance Checker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Indent Sent to Department Checker Successfully");
                } else {
                  toast.success("Indent Sent Successfully");
                }
              } else {
                if (user.role === "COMPLIANCE_MAKER") {
                  toast.success("Indent Sent to back to Department Maker Successfully");
                } else if (user.role === "DEPARTMENT_MAKER") {
                  toast.success("Indent Sent to back to Compliance Maker Successfully");
                } else {
                  toast.success("Indent Sent Successfully");
                }
              }
            }
          } else if (pageType === "closure") {
            if (formData[indentId]?.approvalStatus === "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Indent Sent For Closure to Compliance Checker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Indent Closed Successfully");
              }
            } else if (formData[indentId]?.approvalStatus !== "approve") {
              if (user.role === "COMPLIANCE_MAKER") {
                toast.success("Indent Sent to Compliance Checker Successfully");
              } else if (user.role === "COMPLIANCE_CHECKER") {
                toast.success("Indent Sent Back to Compliance Maker Successfully");
              }
            } else {
              toast.success("Indent Sent to Compliance Checker Successfully");
            }
          }

          // Remove the submitted indent from local state (as it moves to a different workflow stage)
          setData(prevData => prevData.filter(item => item.indentId !== indentId));
          
          // Update total records count
          setTotalRecords(prev => Math.max(0, prev - 1));
          
          // Clear form data for this indent
          setFormData(prev => {
            const newFormData = { ...prev };
            delete newFormData[indentId];
            return newFormData;
          });

          // Refresh notifications
          dispatch(fetchNotifications());
        }
      } catch (error) {
        console.error("Error submitting indent:", error);
        toast.error("An error occurred while submitting the Indent.");
      } finally {
        setIsSubmitting(false);
        setSubmittingIndentId(null);
      }
    },
    [
      pageType,
      formData,
      user.role,
      dispatch,
      isSubmitting,
      submittingIndentId,
    ]
  );

  const handleSortByPriority = useCallback(() => {
    const priorityOrder = { HIGH: 3, MEDIUM: 2, LOW: 1 };
    const sortedData = [...data].sort((a, b) => {
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
    setData(sortedData);
  }, [data]);

  const handlePageChange = useCallback(
    async (event, newPage) => {
      setCurrentPage(newPage);

      // Immediately fetch data for the new page
      const trimmedSearchTerm = searchTerm.trim();
      await fetchDataWithParams(trimmedSearchTerm, newPage, rowsPerPage);
    },
    [searchTerm, fetchDataWithParams, rowsPerPage]
  );

  const handleRowsPerPageChange = useCallback(
    async (event) => {
      const { numericValue, resetToFirstPage } = event;

      setRowsPerPage(numericValue);

      const newPage = resetToFirstPage ? 1 : currentPage;
      if (resetToFirstPage) {
        setCurrentPage(1);
      }

      // Immediately fetch data with new parameters
      const trimmedSearchTerm = searchTerm.trim();
      await fetchDataWithParams(trimmedSearchTerm, newPage, numericValue);
    },
    [currentPage, searchTerm, fetchDataWithParams]
  );

  // Utility functions
  const formatDateTime = useCallback((dateString) => {
    return new Date(dateString).toLocaleString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });
  }, []);

  // Remove filteredData and displayData logic since search is now handled by backend
  const displayData = data;

  return {
    // State
    data,
    searchTerm,
    isModalOpen,
    setIsModalOpen,
    editIndentData,
    setEditIndentData,
    indentToDelete,
    setIndentToDelete,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    descriptionDialogOpen,
    setDescriptionDialogOpen,
    currentDescription,
    setCurrentDescription,
    loading,
    formData,
    setFormData,
    viewAttachementDialogOpen,
    setViewAttachementDialogOpen,
    attachments,
    setAttachments,
    indentId,
    setIndentId,
    currentPage,
    rowsPerPage,
    totalRecords,
    totalPages,
    displayData,
    user,
    isSubmitting,
    submittingIndentId,

    // Handlers
    handleSearch,
    handleAddIndentClick,
    handleChange,
    handleIndentDelete,
    handleSubmitIndent,
    handleSubmitRemark,
    handleEditRemark,
    handleSortByPriority,
    handlePageChange,
    handleRowsPerPageChange,
    fetchData,
    fetchDataWithSearch,
    formatDateTime,
  };
};



